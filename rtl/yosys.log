
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.27+22 (git sha1 266f81816, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)


-- Executing script file `usage.ys' --

1. Executing Verilog-2005 frontend: sdio.v
Parsing SystemVerilog input from `sdio.v' to AST representation.
Storing AST representation for module `$abstract\sdio'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: sdwb.v
Parsing SystemVerilog input from `sdwb.v' to AST representation.
Storing AST representation for module `$abstract\sdwb'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: sdckgen.v
Parsing SystemVerilog input from `sdckgen.v' to AST representation.
Storing AST representation for module `$abstract\sdckgen'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: sdcmd.v
Parsing SystemVerilog input from `sdcmd.v' to AST representation.
Storing AST representation for module `$abstract\sdcmd'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: sdrxframe.v
Parsing SystemVerilog input from `sdrxframe.v' to AST representation.
Storing AST representation for module `$abstract\sdrxframe'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: sdtxframe.v
Parsing SystemVerilog input from `sdtxframe.v' to AST representation.
Storing AST representation for module `$abstract\sdtxframe'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: sdspi.v
Parsing SystemVerilog input from `sdspi.v' to AST representation.
Storing AST representation for module `$abstract\sdspi'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: spicmd.v
Parsing SystemVerilog input from `spicmd.v' to AST representation.
Storing AST representation for module `$abstract\spicmd'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: spirxdata.v
Parsing SystemVerilog input from `spirxdata.v' to AST representation.
Storing AST representation for module `$abstract\spirxdata'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: spitxdata.v
Parsing SystemVerilog input from `spitxdata.v' to AST representation.
Storing AST representation for module `$abstract\spitxdata'.
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: llsdspi.v
Parsing SystemVerilog input from `llsdspi.v' to AST representation.
Storing AST representation for module `$abstract\llsdspi'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: sdfrontend.v
Parsing SystemVerilog input from `sdfrontend.v' to AST representation.
Storing AST representation for module `$abstract\sdfrontend'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: xsdserdes8x.v
Parsing SystemVerilog input from `xsdserdes8x.v' to AST representation.
Storing AST representation for module `$abstract\xsdserdes8x'.
Successfully finished Verilog frontend.

14. Executing HIERARCHY pass (managing design hierarchy).

15. Executing AST frontend in derive mode using pre-parsed AST for module `\sdspi'.
Generating RTLIL representation for module `\sdspi'.

15.1. Analyzing design hierarchy..
Top module:  \sdspi
Parameter \RDDELAY = 2
Parameter \OPT_LITTLE_ENDIAN = 1'0

15.2. Executing AST frontend in derive mode using pre-parsed AST for module `\spitxdata'.
Parameter \RDDELAY = 2
Parameter \OPT_LITTLE_ENDIAN = 1'0
Generating RTLIL representation for module `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata'.
Parameter \OPT_LITTLE_ENDIAN = 1'0

15.3. Executing AST frontend in derive mode using pre-parsed AST for module `\spirxdata'.
Parameter \OPT_LITTLE_ENDIAN = 1'0
Generating RTLIL representation for module `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0'.

15.4. Executing AST frontend in derive mode using pre-parsed AST for module `\spicmd'.
Generating RTLIL representation for module `\spicmd'.
Parameter \SPDBITS = 8
Parameter \STARTUP_CLOCKS = 75
Parameter \POWERUP_IDLE = 1000
Parameter \OPT_SPI_ARBITRATION = 1'0

15.5. Executing AST frontend in derive mode using pre-parsed AST for module `\llsdspi'.
Parameter \SPDBITS = 8
Parameter \STARTUP_CLOCKS = 75
Parameter \POWERUP_IDLE = 1000
Parameter \OPT_SPI_ARBITRATION = 1'0
Generating RTLIL representation for module `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi'.

15.6. Analyzing design hierarchy..
Top module:  \sdspi
Used module:     $paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata
Used module:     $paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0
Used module:     \spicmd
Used module:     $paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi

15.7. Analyzing design hierarchy..
Top module:  \sdspi
Used module:     $paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata
Used module:     $paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0
Used module:     \spicmd
Used module:     $paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi
Removing unused module `$abstract\xsdserdes8x'.
Removing unused module `$abstract\sdfrontend'.
Removing unused module `$abstract\llsdspi'.
Removing unused module `$abstract\spitxdata'.
Removing unused module `$abstract\spirxdata'.
Removing unused module `$abstract\spicmd'.
Removing unused module `$abstract\sdspi'.
Removing unused module `$abstract\sdtxframe'.
Removing unused module `$abstract\sdrxframe'.
Removing unused module `$abstract\sdcmd'.
Removing unused module `$abstract\sdckgen'.
Removing unused module `$abstract\sdwb'.
Removing unused module `$abstract\sdio'.
Removed 13 unused modules.
Mapping positional arguments of cell sdspi.spitxdatai ($paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata).
Mapping positional arguments of cell sdspi.spirxdatai ($paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0).
Mapping positional arguments of cell sdspi.spicmdi (spicmd).
Mapping positional arguments of cell sdspi.lowlevel ($paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi).

16. Executing SYNTH pass.

16.1. Executing HIERARCHY pass (managing design hierarchy).

16.1.1. Analyzing design hierarchy..
Top module:  \sdspi
Used module:     $paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata
Used module:     $paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0
Used module:     \spicmd
Used module:     $paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi

16.1.2. Analyzing design hierarchy..
Top module:  \sdspi
Used module:     $paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata
Used module:     $paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0
Used module:     \spicmd
Used module:     $paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi
Removed 0 unused modules.

16.2. Executing PROC pass (convert processes to netlists).

16.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:344$326'.
Found and cleaned up 5 empty switches in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:169$255'.
Found and cleaned up 1 empty switch in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:452$618'.
Found and cleaned up 1 empty switch in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:395$589'.
Found and cleaned up 1 empty switch in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:315$566'.
Found and cleaned up 1 empty switch in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:207$397'.
Found and cleaned up 1 empty switch in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:185$389'.
Cleaned up 11 empty switches.

16.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$spitxdata.v:373$336 in module $paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.
Marked 2 switch rules as full_case in process $proc$spitxdata.v:357$328 in module $paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.
Marked 1 switch rules as full_case in process $proc$spitxdata.v:344$326 in module $paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.
Marked 2 switch rules as full_case in process $proc$spitxdata.v:324$317 in module $paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.
Marked 2 switch rules as full_case in process $proc$spitxdata.v:292$305 in module $paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.
Marked 1 switch rules as full_case in process $proc$spitxdata.v:281$297 in module $paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.
Marked 1 switch rules as full_case in process $proc$spitxdata.v:265$293 in module $paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.
Marked 1 switch rules as full_case in process $proc$spitxdata.v:255$289 in module $paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.
Marked 1 switch rules as full_case in process $proc$spitxdata.v:245$284 in module $paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.
Marked 3 switch rules as full_case in process $proc$spitxdata.v:226$265 in module $paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.
Marked 4 switch rules as full_case in process $proc$spitxdata.v:169$255 in module $paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.
Marked 2 switch rules as full_case in process $proc$spitxdata.v:157$250 in module $paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.
Marked 1 switch rules as full_case in process $proc$spitxdata.v:147$247 in module $paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.
Marked 1 switch rules as full_case in process $proc$spitxdata.v:125$240 in module $paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.
Marked 2 switch rules as full_case in process $proc$spitxdata.v:113$235 in module $paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.
Marked 2 switch rules as full_case in process $proc$spitxdata.v:100$230 in module $paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.
Marked 1 switch rules as full_case in process $proc$sdspi.v:749$200 in module sdspi.
Marked 1 switch rules as full_case in process $proc$sdspi.v:742$194 in module sdspi.
Marked 2 switch rules as full_case in process $proc$sdspi.v:729$190 in module sdspi.
Marked 1 switch rules as full_case in process $proc$sdspi.v:784$162 in module sdspi.
Marked 1 switch rules as full_case in process $proc$sdspi.v:777$159 in module sdspi.
Marked 1 switch rules as full_case in process $proc$sdspi.v:687$149 in module sdspi.
Marked 1 switch rules as full_case in process $proc$sdspi.v:680$147 in module sdspi.
Marked 1 switch rules as full_case in process $proc$sdspi.v:667$146 in module sdspi.
Marked 1 switch rules as full_case in process $proc$sdspi.v:598$122 in module sdspi.
Marked 4 switch rules as full_case in process $proc$sdspi.v:569$117 in module sdspi.
Marked 2 switch rules as full_case in process $proc$sdspi.v:543$111 in module sdspi.
Marked 2 switch rules as full_case in process $proc$sdspi.v:484$94 in module sdspi.
Marked 1 switch rules as full_case in process $proc$sdspi.v:467$89 in module sdspi.
Marked 1 switch rules as full_case in process $proc$sdspi.v:455$82 in module sdspi.
Marked 1 switch rules as full_case in process $proc$sdspi.v:449$78 in module sdspi.
Marked 1 switch rules as full_case in process $proc$sdspi.v:438$71 in module sdspi.
Marked 1 switch rules as full_case in process $proc$sdspi.v:434$64 in module sdspi.
Marked 1 switch rules as full_case in process $proc$sdspi.v:420$57 in module sdspi.
Marked 1 switch rules as full_case in process $proc$sdspi.v:405$49 in module sdspi.
Marked 1 switch rules as full_case in process $proc$sdspi.v:380$42 in module sdspi.
Marked 1 switch rules as full_case in process $proc$llsdspi.v:214$624 in module $paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.
Marked 1 switch rules as full_case in process $proc$llsdspi.v:176$620 in module $paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.
Marked 1 switch rules as full_case in process $proc$llsdspi.v:443$609 in module $paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.
Marked 4 switch rules as full_case in process $proc$llsdspi.v:412$599 in module $paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.
Marked 1 switch rules as full_case in process $proc$llsdspi.v:395$589 in module $paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.
Marked 4 switch rules as full_case in process $proc$llsdspi.v:375$583 in module $paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.
Marked 5 switch rules as full_case in process $proc$llsdspi.v:315$566 in module $paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.
Marked 1 switch rules as full_case in process $proc$llsdspi.v:288$561 in module $paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.
Marked 6 switch rules as full_case in process $proc$llsdspi.v:264$547 in module $paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.
Marked 2 switch rules as full_case in process $proc$spicmd.v:216$532 in module spicmd.
Marked 1 switch rules as full_case in process $proc$spicmd.v:206$527 in module spicmd.
Marked 1 switch rules as full_case in process $proc$spicmd.v:180$512 in module spicmd.
Marked 1 switch rules as full_case in process $proc$spicmd.v:169$510 in module spicmd.
Marked 2 switch rules as full_case in process $proc$spicmd.v:154$503 in module spicmd.
Marked 1 switch rules as full_case in process $proc$spicmd.v:145$500 in module spicmd.
Marked 1 switch rules as full_case in process $proc$spicmd.v:131$496 in module spicmd.
Marked 1 switch rules as full_case in process $proc$spicmd.v:120$492 in module spicmd.
Marked 1 switch rules as full_case in process $proc$spicmd.v:110$486 in module spicmd.
Marked 1 switch rules as full_case in process $proc$spicmd.v:93$482 in module spicmd.
Marked 2 switch rules as full_case in process $proc$spicmd.v:80$477 in module spicmd.
Marked 1 switch rules as full_case in process $proc$spirxdata.v:355$456 in module $paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.
Marked 1 switch rules as full_case in process $proc$spirxdata.v:345$454 in module $paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.
Marked 2 switch rules as full_case in process $proc$spirxdata.v:328$446 in module $paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.
Marked 1 switch rules as full_case in process $proc$spirxdata.v:318$444 in module $paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.
Marked 2 switch rules as full_case in process $proc$spirxdata.v:298$433 in module $paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.
Marked 2 switch rules as full_case in process $proc$spirxdata.v:259$418 in module $paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.
Marked 1 switch rules as full_case in process $proc$spirxdata.v:248$412 in module $paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.
Marked 1 switch rules as full_case in process $proc$spirxdata.v:238$408 in module $paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.
Marked 1 switch rules as full_case in process $proc$spirxdata.v:228$403 in module $paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.
Marked 2 switch rules as full_case in process $proc$spirxdata.v:207$397 in module $paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.
Marked 1 switch rules as full_case in process $proc$spirxdata.v:197$392 in module $paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.
Marked 2 switch rules as full_case in process $proc$spirxdata.v:173$382 in module $paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.
Marked 2 switch rules as full_case in process $proc$spirxdata.v:161$375 in module $paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.
Marked 1 switch rules as full_case in process $proc$spirxdata.v:151$371 in module $paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.
Marked 2 switch rules as full_case in process $proc$spirxdata.v:139$368 in module $paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.
Marked 1 switch rules as full_case in process $proc$spirxdata.v:129$365 in module $paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.
Marked 2 switch rules as full_case in process $proc$spirxdata.v:103$356 in module $paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.
Marked 2 switch rules as full_case in process $proc$spirxdata.v:90$352 in module $paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.
Removed a total of 0 dead cases.

16.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 18 redundant assignments.
Promoted 105 assignments to connections.

16.2.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$351'.
  Set init value: \crc_fill = 5'00000
Found init rule in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$350'.
  Set init value: \lastaddr = 1'0
Found init rule in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$349'.
  Set init value: \r_lgblksz_m3 = 3'000
Found init rule in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$348'.
  Set init value: \data_sent = 1'0
Found init rule in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$347'.
  Set init value: \crc_flag = 1'0
Found init rule in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$346'.
  Set init value: \all_mem_read = 1'0
Found init rule in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$345'.
  Set init value: \o_read = 1'0
  Set init value: \crc_stb = 1'0
Found init rule in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$344'.
  Set init value: \fill = 5'00000
Found init rule in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$343'.
  Set init value: \o_ll_stb = 1'0
Found init rule in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$342'.
  Set init value: \rdvalid = 2'00
Found init rule in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$341'.
  Set init value: \all_idle = 1'0
Found init rule in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$340'.
  Set init value: \received_token = 1'0
Found init rule in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$339'.
  Set init value: \o_rxvalid = 1'0
Found init rule in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$338'.
  Set init value: \o_busy = 1'0
Found init rule in `\sdspi.$proc$sdspi.v:0$224'.
  Set init value: \GEN_CARD_DETECT.r_card_present = 1'0
Found init rule in `\sdspi.$proc$sdspi.v:0$223'.
  Set init value: \GEN_CARD_DETECT.card_detect_counter = 10'0000000000
Found init rule in `\sdspi.$proc$sdspi.v:0$222'.
  Set init value: \GEN_CARD_DETECT.raw_card_present = 3'000
Found init rule in `\sdspi.$proc$sdspi.v:0$221'.
  Set init value: \GEN_CARD_DETECT.r_card_removed = 1'1
Found init rule in `\sdspi.$proc$sdspi.v:0$220'.
  Set init value: \dbg_trigger = 1'0
Found init rule in `\sdspi.$proc$sdspi.v:0$219'.
  Set init value: \r_watchdog = 26'11111111111111111111111111
Found init rule in `\sdspi.$proc$sdspi.v:0$218'.
  Set init value: \r_watchdog_err = 1'0
Found init rule in `\sdspi.$proc$sdspi.v:0$217'.
  Set init value: \o_int = 1'0
Found init rule in `\sdspi.$proc$sdspi.v:0$216'.
  Set init value: \last_busy = 1'0
Found init rule in `\sdspi.$proc$sdspi.v:0$215'.
  Set init value: \o_wb_ack = 1'0
Found init rule in `\sdspi.$proc$sdspi.v:0$214'.
  Set init value: \dly_stb = 1'0
Found init rule in `\sdspi.$proc$sdspi.v:0$213'.
  Set init value: \r_lgblklen = 4'1001
Found init rule in `\sdspi.$proc$sdspi.v:0$212'.
  Set init value: \r_sdspi_clk = 8'01111100
Found init rule in `\sdspi.$proc$sdspi.v:0$211'.
  Set init value: \ll_cmd_stb = 1'0
Found init rule in `\sdspi.$proc$sdspi.v:0$210'.
  Set init value: \r_cmd_err = 1'0
Found init rule in `\sdspi.$proc$sdspi.v:0$209'.
  Set init value: \rx_start = 1'0
Found init rule in `\sdspi.$proc$sdspi.v:0$208'.
  Set init value: \tx_start = 1'0
Found init rule in `\sdspi.$proc$sdspi.v:0$207'.
  Set init value: \r_cmd_busy = 1'0
Found init rule in `\sdspi.$proc$sdspi.v:0$206'.
  Set init value: \r_fifo_id = 1'0
Found init rule in `\sdspi.$proc$sdspi.v:0$205'.
  Set init value: \write_fifo_b = 1'0
Found init rule in `\sdspi.$proc$sdspi.v:0$204'.
  Set init value: \write_fifo_a = 1'0
Found init rule in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$644'.
  Set init value: \startup_hold = 1'1
Found init rule in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$643'.
  Set init value: \WAIT_FOR_STARTUP.startup_counter = 7'1001011
Found init rule in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$642'.
  Set init value: \powerup_hold = 1'1
Found init rule in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$641'.
  Set init value: \WAIT_FOR_POWERUP.powerup_counter = 10'1111101000
Found init rule in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$640'.
  Set init value: \o_stb = 1'0
Found init rule in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$639'.
  Set init value: \o_mosi = 1'1
Found init rule in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$638'.
  Set init value: \r_byte = 8'11111111
Found init rule in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$637'.
  Set init value: \o_sclk = 1'1
Found init rule in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$636'.
  Set init value: \r_idle = 1'0
Found init rule in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$635'.
  Set init value: \r_state = 4'0000
Found init rule in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$634'.
  Set init value: \o_cs_n = 1'1
Found init rule in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$633'.
  Set init value: \r_z_counter = 1'1
Found init rule in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$632'.
  Set init value: \r_clk_counter = 8'00000000
Found init rule in `\spicmd.$proc$spicmd.v:0$545'.
  Set init value: \o_response = 40'1111111111111111111111111111111111111111
Found init rule in `\spicmd.$proc$spicmd.v:0$544'.
  Set init value: \o_rxvalid = 1'0
Found init rule in `\spicmd.$proc$spicmd.v:0$543'.
  Set init value: \rx_counter = 3'001
Found init rule in `\spicmd.$proc$spicmd.v:0$542'.
  Set init value: \rxvalid = 1'0
Found init rule in `\spicmd.$proc$spicmd.v:0$541'.
  Set init value: \crc_byte = 8'00000000
Found init rule in `\spicmd.$proc$spicmd.v:0$540'.
  Set init value: \crc_bit_counter = 5'10100
Found init rule in `\spicmd.$proc$spicmd.v:0$539'.
  Set init value: \crc_busy = 1'0
Found init rule in `\spicmd.$proc$spicmd.v:0$538'.
  Set init value: \crc_valid_sreg = 5'10000
Found init rule in `\spicmd.$proc$spicmd.v:0$537'.
  Set init value: \o_cmd_sent = 1'0
Found init rule in `\spicmd.$proc$spicmd.v:0$536'.
  Set init value: \shift_data = 40'1111111111111111111111111111111111111111
Found init rule in `\spicmd.$proc$spicmd.v:0$535'.
  Set init value: \o_busy = 1'0
Found init rule in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$476'.
  Set init value: \crc_err = 1'0
Found init rule in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$475'.
  Set init value: \crc_data = 16'0000000000000000
Found init rule in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$474'.
  Set init value: \crc_active = 1'0
Found init rule in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$473'.
  Set init value: \crc_fill = 4'0000
Found init rule in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$472'.
  Set init value: \lastaddr = 1'0
Found init rule in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$471'.
  Set init value: \r_lgblksz_m3 = 3'000
Found init rule in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$470'.
  Set init value: \crc_byte = 2'00
Found init rule in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$469'.
  Set init value: \all_mem_written = 1'0
Found init rule in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$468'.
  Set init value: \fill = 3'000
Found init rule in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$467'.
  Set init value: \o_data = 0
Found init rule in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$466'.
  Set init value: \o_write = 1'0
Found init rule in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$465'.
  Set init value: \o_response = 8'00000000
Found init rule in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$464'.
  Set init value: \o_rxvalid = 1'0
Found init rule in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$463'.
  Set init value: \o_busy = 1'0
Found init rule in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$462'.
  Set init value: \received_token = 1'0

16.2.5. Executing PROC_ARST pass (detect async resets in processes).

16.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~206 debug messages>

16.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$351'.
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$350'.
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$349'.
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$348'.
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$347'.
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$346'.
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$345'.
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$344'.
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$343'.
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$342'.
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$341'.
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$340'.
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$339'.
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$338'.
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:373$336'.
     1/1: $0\crc_data[15:0]
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:357$328'.
     1/2: $2\next_crc_data[15:0]
     2/2: $1\next_crc_data[15:0]
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:344$326'.
     1/1: $0\crc_gearbox[31:0]
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:324$317'.
     1/2: $0\crc_fill[4:0]
     2/2: $0\crc_active[0:0]
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:292$305'.
     1/2: $0\r_lgblksz_m3[2:0]
     2/2: $0\lastaddr[0:0]
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:281$297'.
     1/1: $0\data_sent[0:0]
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:274$296'.
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:265$293'.
     1/1: $0\crc_flag[0:0]
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:255$289'.
     1/1: $0\all_mem_read[0:0]
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:245$284'.
     1/2: $0\o_addr[7:0] [7]
     2/2: $0\o_addr[7:0] [6:0]
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:226$265'.
     1/2: $0\crc_stb[0:0]
     2/2: $0\o_read[0:0]
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:169$255'.
     1/4: $0\fill[4:0] [4]
     2/4: $0\gearbox[39:0] [31:0]
     3/4: $0\gearbox[39:0] [39:32]
     4/4: $0\fill[4:0] [3:0]
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:157$250'.
     1/1: $0\o_ll_stb[0:0]
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:147$247'.
     1/1: $0\rdvalid[1:0]
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:134$246'.
     1/1: $0\o_response[7:0]
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:125$240'.
     1/1: $0\all_idle[0:0]
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:113$235'.
     1/2: $0\received_token[0:0]
     2/2: $0\o_rxvalid[0:0]
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:100$230'.
     1/1: $0\o_busy[0:0]
Creating decoders for process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:93$225'.
Creating decoders for process `\sdspi.$proc$sdspi.v:0$224'.
Creating decoders for process `\sdspi.$proc$sdspi.v:0$223'.
Creating decoders for process `\sdspi.$proc$sdspi.v:0$222'.
Creating decoders for process `\sdspi.$proc$sdspi.v:0$221'.
Creating decoders for process `\sdspi.$proc$sdspi.v:0$220'.
Creating decoders for process `\sdspi.$proc$sdspi.v:0$219'.
Creating decoders for process `\sdspi.$proc$sdspi.v:0$218'.
Creating decoders for process `\sdspi.$proc$sdspi.v:0$217'.
Creating decoders for process `\sdspi.$proc$sdspi.v:0$216'.
Creating decoders for process `\sdspi.$proc$sdspi.v:0$215'.
Creating decoders for process `\sdspi.$proc$sdspi.v:0$214'.
Creating decoders for process `\sdspi.$proc$sdspi.v:0$213'.
Creating decoders for process `\sdspi.$proc$sdspi.v:0$212'.
Creating decoders for process `\sdspi.$proc$sdspi.v:0$211'.
Creating decoders for process `\sdspi.$proc$sdspi.v:0$210'.
Creating decoders for process `\sdspi.$proc$sdspi.v:0$209'.
Creating decoders for process `\sdspi.$proc$sdspi.v:0$208'.
Creating decoders for process `\sdspi.$proc$sdspi.v:0$207'.
Creating decoders for process `\sdspi.$proc$sdspi.v:0$206'.
Creating decoders for process `\sdspi.$proc$sdspi.v:0$205'.
Creating decoders for process `\sdspi.$proc$sdspi.v:0$204'.
Creating decoders for process `\sdspi.$proc$sdspi.v:749$200'.
     1/1: $0\GEN_CARD_DETECT.r_card_present[0:0]
Creating decoders for process `\sdspi.$proc$sdspi.v:742$194'.
     1/1: $0\GEN_CARD_DETECT.card_detect_counter[9:0]
Creating decoders for process `\sdspi.$proc$sdspi.v:738$193'.
Creating decoders for process `\sdspi.$proc$sdspi.v:729$190'.
     1/1: $0\GEN_CARD_DETECT.r_card_removed[0:0]
Creating decoders for process `\sdspi.$proc$sdspi.v:801$169'.
Creating decoders for process `\sdspi.$proc$sdspi.v:798$166'.
Creating decoders for process `\sdspi.$proc$sdspi.v:784$162'.
     1/1: $0\r_watchdog[25:0]
Creating decoders for process `\sdspi.$proc$sdspi.v:777$159'.
     1/1: $0\r_watchdog_err[0:0]
Creating decoders for process `\sdspi.$proc$sdspi.v:706$152'.
Creating decoders for process `\sdspi.$proc$sdspi.v:702$151'.
Creating decoders for process `\sdspi.$proc$sdspi.v:687$149'.
     1/1: $0\o_wb_ack[0:0]
Creating decoders for process `\sdspi.$proc$sdspi.v:680$147'.
     1/1: $0\dly_stb[0:0]
Creating decoders for process `\sdspi.$proc$sdspi.v:667$146'.
     1/1: $0\o_wb_data[31:0]
Creating decoders for process `\sdspi.$proc$sdspi.v:659$144'.
Creating decoders for process `\sdspi.$proc$sdspi.v:656$143'.
Creating decoders for process `\sdspi.$proc$sdspi.v:626$135'.
     1/2: $0\r_sdspi_clk[7:0]
     2/2: $0\r_lgblklen[3:0]
Creating decoders for process `\sdspi.$proc$sdspi.v:598$122'.
     1/2: $0\ll_cmd_dat[7:0]
     2/2: $0\ll_cmd_stb[0:0]
Creating decoders for process `\sdspi.$proc$sdspi.v:569$117'.
     1/2: $0\r_last_r_one[7:0]
     2/2: $0\r_data_reg[31:0]
Creating decoders for process `\sdspi.$proc$sdspi.v:543$111'.
     1/1: $0\r_cmd_err[0:0]
Creating decoders for process `\sdspi.$proc$sdspi.v:484$94'.
     1/5: $0\tx_start[0:0]
     2/5: $0\rx_start[0:0]
     3/5: $0\write_to_card[0:0]
     4/5: $0\r_use_fifo[0:0]
     5/5: $0\r_cmd_busy[0:0]
Creating decoders for process `\sdspi.$proc$sdspi.v:474$91'.
     1/1: $0\r_fifo_id[0:0]
Creating decoders for process `\sdspi.$proc$sdspi.v:467$89'.
     1/1: $0\spi_read_data[31:0]
Creating decoders for process `\sdspi.$proc$sdspi.v:464$87'.
Creating decoders for process `\sdspi.$proc$sdspi.v:461$85'.
Creating decoders for process `\sdspi.$proc$sdspi.v:455$82'.
     1/1: $1\read_fifo_b_addr[6:0]
Creating decoders for process `\sdspi.$proc$sdspi.v:449$78'.
     1/1: $1\read_fifo_a_addr[6:0]
Creating decoders for process `\sdspi.$proc$sdspi.v:438$71'.
     1/3: $1$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$77
     2/3: $1$memwr$\fifo_b$sdspi.v:440$29_DATA[31:0]$76
     3/3: $1$memwr$\fifo_b$sdspi.v:440$29_ADDR[6:0]$75
Creating decoders for process `\sdspi.$proc$sdspi.v:434$64'.
     1/3: $1$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$70
     2/3: $1$memwr$\fifo_a$sdspi.v:436$28_DATA[31:0]$69
     3/3: $1$memwr$\fifo_a$sdspi.v:436$28_ADDR[6:0]$68
Creating decoders for process `\sdspi.$proc$sdspi.v:420$57'.
     1/3: $0\write_fifo_b_addr[6:0]
     2/3: $0\write_fifo_b_data[31:0]
     3/3: $0\write_fifo_b[0:0]
Creating decoders for process `\sdspi.$proc$sdspi.v:405$49'.
     1/3: $0\write_fifo_a_addr[6:0]
     2/3: $0\write_fifo_a_data[31:0]
     3/3: $0\write_fifo_a[0:0]
Creating decoders for process `\sdspi.$proc$sdspi.v:380$42'.
     1/1: $0\fifo_wb_addr[6:0]
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$644'.
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$643'.
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$642'.
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$641'.
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$640'.
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$639'.
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$638'.
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$637'.
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$636'.
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$635'.
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$634'.
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$633'.
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$632'.
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:214$624'.
     1/2: $0\WAIT_FOR_STARTUP.startup_counter[6:0]
     2/2: $0\startup_hold[0:0]
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:176$620'.
     1/2: $0\WAIT_FOR_POWERUP.powerup_counter[9:0]
     2/2: $0\powerup_hold[0:0]
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:452$618'.
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:443$609'.
     1/1: $0\o_stb[0:0]
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:412$599'.
     1/2: $0\r_byte[7:0]
     2/2: $0\o_mosi[0:0]
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:395$589'.
     1/1: $0\o_sclk[0:0]
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:375$583'.
     1/1: $0\r_idle[0:0]
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:367$579'.
     1/1: $0\o_byte[7:0]
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:360$576'.
     1/1: $0\r_ireg[7:0]
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:315$566'.
     1/2: $0\r_state[3:0]
     2/2: $0\o_cs_n[0:0]
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:288$561'.
     1/2: $0\r_clk_counter[7:0]
     2/2: $0\r_z_counter[0:0]
Creating decoders for process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:264$547'.
     1/6: $6\restart_counter[0:0]
     2/6: $5\restart_counter[0:0]
     3/6: $4\restart_counter[0:0]
     4/6: $3\restart_counter[0:0]
     5/6: $2\restart_counter[0:0]
     6/6: $1\restart_counter[0:0]
Creating decoders for process `\spicmd.$proc$spicmd.v:0$545'.
Creating decoders for process `\spicmd.$proc$spicmd.v:0$544'.
Creating decoders for process `\spicmd.$proc$spicmd.v:0$543'.
Creating decoders for process `\spicmd.$proc$spicmd.v:0$542'.
Creating decoders for process `\spicmd.$proc$spicmd.v:0$541'.
Creating decoders for process `\spicmd.$proc$spicmd.v:0$540'.
Creating decoders for process `\spicmd.$proc$spicmd.v:0$539'.
Creating decoders for process `\spicmd.$proc$spicmd.v:0$538'.
Creating decoders for process `\spicmd.$proc$spicmd.v:0$537'.
Creating decoders for process `\spicmd.$proc$spicmd.v:0$536'.
Creating decoders for process `\spicmd.$proc$spicmd.v:0$535'.
Creating decoders for process `\spicmd.$proc$spicmd.v:216$532'.
     1/2: $0\o_response[39:0] [39:32]
     2/2: $0\o_response[39:0] [31:0]
Creating decoders for process `\spicmd.$proc$spicmd.v:206$527'.
     1/1: $0\o_rxvalid[0:0]
Creating decoders for process `\spicmd.$proc$spicmd.v:180$512'.
     1/4: $0\rx_counter[2:0]
     2/4: $0\rxvalid[0:0]
     3/4: $0\rx_check_busy[0:0]
     4/4: $0\rx_r1_byte[0:0]
Creating decoders for process `\spicmd.$proc$spicmd.v:169$510'.
     1/1: $0\crc_byte[7:0]
Creating decoders for process `\spicmd.$proc$spicmd.v:154$503'.
     1/2: $2\next_crc_byte[6:0]
     2/2: $1\next_crc_byte[6:0]
Creating decoders for process `\spicmd.$proc$spicmd.v:145$500'.
     1/1: $0\crc_shift_reg[39:0]
Creating decoders for process `\spicmd.$proc$spicmd.v:131$496'.
     1/2: $0\crc_bit_counter[4:0]
     2/2: $0\crc_busy[0:0]
Creating decoders for process `\spicmd.$proc$spicmd.v:120$492'.
     1/1: $0\crc_valid_sreg[4:0]
Creating decoders for process `\spicmd.$proc$spicmd.v:110$486'.
     1/2: $0\o_cmd_sent[0:0]
     2/2: $0\almost_sent[0:0]
Creating decoders for process `\spicmd.$proc$spicmd.v:93$482'.
     1/2: $0\shift_data[39:0] [39:32]
     2/2: $0\shift_data[39:0] [31:0]
Creating decoders for process `\spicmd.$proc$spicmd.v:80$477'.
     1/1: $0\o_busy[0:0]
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$476'.
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$475'.
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$474'.
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$473'.
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$472'.
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$471'.
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$470'.
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$469'.
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$468'.
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$467'.
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$466'.
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$465'.
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$464'.
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$463'.
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$462'.
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:355$456'.
     1/1: $0\crc_err[0:0]
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:345$454'.
     1/1: $0\crc_data[15:0]
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:328$446'.
     1/2: $1\next_crc_data[15:0]
     2/2: $1\first_crc_data[15:0]
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:318$444'.
     1/1: $0\crc_gearbox[7:0]
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:298$433'.
     1/2: $0\crc_fill[3:0]
     2/2: $0\crc_active[0:0]
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:290$430'.
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:259$418'.
     1/2: $0\r_lgblksz_m3[2:0]
     2/2: $0\lastaddr[0:0]
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:248$412'.
     1/1: $0\crc_byte[1:0]
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:238$408'.
     1/1: $0\all_mem_written[0:0]
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:228$403'.
     1/1: $0\lastdata[0:0]
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:207$397'.
     1/2: $0\fill[2:0]
     2/2: $0\gearbox[23:0]
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:197$392'.
     1/1: $0\o_addr[7:0]
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:185$389'.
     1/1: $0\o_data[31:0]
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:173$382'.
     1/1: $0\o_write[0:0]
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:161$375'.
     1/1: $0\o_response[7:0]
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:151$371'.
     1/1: $0\o_rxvalid[0:0]
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:139$368'.
     1/1: $0\o_busy[0:0]
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:129$365'.
     1/1: $0\received_token[0:0]
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:122$362'.
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:116$360'.
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:103$356'.
     1/2: $2\start_token[0:0]
     2/2: $1\start_token[0:0]
Creating decoders for process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:90$352'.
     1/2: $2\error_token[0:0]
     2/2: $1\error_token[0:0]

16.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.\next_crc_data' from process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:357$328'.
No latch inferred for signal `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.\data_read' from process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:274$296'.
No latch inferred for signal `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.\token' from process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:93$225'.
No latch inferred for signal `\sdspi.\card_status' from process `\sdspi.$proc$sdspi.v:659$144'.
No latch inferred for signal `\sdspi.\read_fifo_b_addr' from process `\sdspi.$proc$sdspi.v:455$82'.
No latch inferred for signal `\sdspi.\read_fifo_a_addr' from process `\sdspi.$proc$sdspi.v:449$78'.
No latch inferred for signal `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.\o_idle' from process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:452$618'.
No latch inferred for signal `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.\restart_counter' from process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:264$547'.
No latch inferred for signal `\spicmd.\next_crc_byte' from process `\spicmd.$proc$spicmd.v:154$503'.
No latch inferred for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\next_crc_data' from process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:328$446'.
No latch inferred for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\first_crc_data' from process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:328$446'.
No latch inferred for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\new_data_byte' from process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:290$430'.
No latch inferred for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\done' from process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:122$362'.
No latch inferred for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\token' from process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:116$360'.
No latch inferred for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\start_token' from process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:103$356'.
No latch inferred for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\error_token' from process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:90$352'.

16.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.\crc_data' using process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:373$336'.
  created $dff cell `$procdff$1468' with positive edge clock.
Creating register for signal `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.\crc_gearbox' using process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:344$326'.
  created $dff cell `$procdff$1469' with positive edge clock.
Creating register for signal `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.\crc_active' using process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:324$317'.
  created $dff cell `$procdff$1470' with positive edge clock.
Creating register for signal `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.\crc_fill' using process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:324$317'.
  created $dff cell `$procdff$1471' with positive edge clock.
Creating register for signal `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.\lastaddr' using process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:292$305'.
  created $dff cell `$procdff$1472' with positive edge clock.
Creating register for signal `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.\r_lgblksz_m3' using process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:292$305'.
  created $dff cell `$procdff$1473' with positive edge clock.
Creating register for signal `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.\data_sent' using process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:281$297'.
  created $dff cell `$procdff$1474' with positive edge clock.
Creating register for signal `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.\crc_flag' using process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:265$293'.
  created $dff cell `$procdff$1475' with positive edge clock.
Creating register for signal `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.\all_mem_read' using process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:255$289'.
  created $dff cell `$procdff$1476' with positive edge clock.
Creating register for signal `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.\o_addr' using process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:245$284'.
  created $dff cell `$procdff$1477' with positive edge clock.
Creating register for signal `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.\o_read' using process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:226$265'.
  created $dff cell `$procdff$1478' with positive edge clock.
Creating register for signal `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.\crc_stb' using process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:226$265'.
  created $dff cell `$procdff$1479' with positive edge clock.
Creating register for signal `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.\gearbox' using process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:169$255'.
  created $dff cell `$procdff$1480' with positive edge clock.
Creating register for signal `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.\fill' using process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:169$255'.
  created $dff cell `$procdff$1481' with positive edge clock.
Creating register for signal `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.\o_ll_stb' using process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:157$250'.
  created $dff cell `$procdff$1482' with positive edge clock.
Creating register for signal `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.\rdvalid' using process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:147$247'.
  created $dff cell `$procdff$1483' with positive edge clock.
Creating register for signal `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.\o_response' using process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:134$246'.
  created $dff cell `$procdff$1484' with positive edge clock.
Creating register for signal `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.\all_idle' using process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:125$240'.
  created $dff cell `$procdff$1485' with positive edge clock.
Creating register for signal `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.\o_rxvalid' using process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:113$235'.
  created $dff cell `$procdff$1486' with positive edge clock.
Creating register for signal `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.\received_token' using process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:113$235'.
  created $dff cell `$procdff$1487' with positive edge clock.
Creating register for signal `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.\o_busy' using process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:100$230'.
  created $dff cell `$procdff$1488' with positive edge clock.
Creating register for signal `\sdspi.\GEN_CARD_DETECT.r_card_present' using process `\sdspi.$proc$sdspi.v:749$200'.
  created $dff cell `$procdff$1489' with positive edge clock.
Creating register for signal `\sdspi.\GEN_CARD_DETECT.card_detect_counter' using process `\sdspi.$proc$sdspi.v:742$194'.
  created $dff cell `$procdff$1490' with positive edge clock.
Creating register for signal `\sdspi.\GEN_CARD_DETECT.raw_card_present' using process `\sdspi.$proc$sdspi.v:738$193'.
  created $dff cell `$procdff$1491' with positive edge clock.
Creating register for signal `\sdspi.\GEN_CARD_DETECT.r_card_removed' using process `\sdspi.$proc$sdspi.v:729$190'.
  created $dff cell `$procdff$1492' with positive edge clock.
Creating register for signal `\sdspi.\o_debug' using process `\sdspi.$proc$sdspi.v:801$169'.
  created $dff cell `$procdff$1493' with positive edge clock.
Creating register for signal `\sdspi.\dbg_trigger' using process `\sdspi.$proc$sdspi.v:798$166'.
  created $dff cell `$procdff$1494' with positive edge clock.
Creating register for signal `\sdspi.\r_watchdog' using process `\sdspi.$proc$sdspi.v:784$162'.
  created $dff cell `$procdff$1495' with positive edge clock.
Creating register for signal `\sdspi.\r_watchdog_err' using process `\sdspi.$proc$sdspi.v:777$159'.
  created $dff cell `$procdff$1496' with positive edge clock.
Creating register for signal `\sdspi.\o_int' using process `\sdspi.$proc$sdspi.v:706$152'.
  created $dff cell `$procdff$1497' with positive edge clock.
Creating register for signal `\sdspi.\last_busy' using process `\sdspi.$proc$sdspi.v:702$151'.
  created $dff cell `$procdff$1498' with positive edge clock.
Creating register for signal `\sdspi.\o_wb_ack' using process `\sdspi.$proc$sdspi.v:687$149'.
  created $dff cell `$procdff$1499' with positive edge clock.
Creating register for signal `\sdspi.\dly_stb' using process `\sdspi.$proc$sdspi.v:680$147'.
  created $dff cell `$procdff$1500' with positive edge clock.
Creating register for signal `\sdspi.\o_wb_data' using process `\sdspi.$proc$sdspi.v:667$146'.
  created $dff cell `$procdff$1501' with positive edge clock.
Creating register for signal `\sdspi.\pipe_addr' using process `\sdspi.$proc$sdspi.v:656$143'.
  created $dff cell `$procdff$1502' with positive edge clock.
Creating register for signal `\sdspi.\r_lgblklen' using process `\sdspi.$proc$sdspi.v:626$135'.
  created $dff cell `$procdff$1503' with positive edge clock.
Creating register for signal `\sdspi.\r_sdspi_clk' using process `\sdspi.$proc$sdspi.v:626$135'.
  created $dff cell `$procdff$1504' with positive edge clock.
Creating register for signal `\sdspi.\ll_cmd_stb' using process `\sdspi.$proc$sdspi.v:598$122'.
  created $dff cell `$procdff$1505' with positive edge clock.
Creating register for signal `\sdspi.\ll_cmd_dat' using process `\sdspi.$proc$sdspi.v:598$122'.
  created $dff cell `$procdff$1506' with positive edge clock.
Creating register for signal `\sdspi.\r_data_reg' using process `\sdspi.$proc$sdspi.v:569$117'.
  created $dff cell `$procdff$1507' with positive edge clock.
Creating register for signal `\sdspi.\r_last_r_one' using process `\sdspi.$proc$sdspi.v:569$117'.
  created $dff cell `$procdff$1508' with positive edge clock.
Creating register for signal `\sdspi.\r_cmd_err' using process `\sdspi.$proc$sdspi.v:543$111'.
  created $dff cell `$procdff$1509' with positive edge clock.
Creating register for signal `\sdspi.\r_cmd_busy' using process `\sdspi.$proc$sdspi.v:484$94'.
  created $dff cell `$procdff$1510' with positive edge clock.
Creating register for signal `\sdspi.\r_use_fifo' using process `\sdspi.$proc$sdspi.v:484$94'.
  created $dff cell `$procdff$1511' with positive edge clock.
Creating register for signal `\sdspi.\write_to_card' using process `\sdspi.$proc$sdspi.v:484$94'.
  created $dff cell `$procdff$1512' with positive edge clock.
Creating register for signal `\sdspi.\rx_start' using process `\sdspi.$proc$sdspi.v:484$94'.
  created $dff cell `$procdff$1513' with positive edge clock.
Creating register for signal `\sdspi.\tx_start' using process `\sdspi.$proc$sdspi.v:484$94'.
  created $dff cell `$procdff$1514' with positive edge clock.
Creating register for signal `\sdspi.\r_fifo_id' using process `\sdspi.$proc$sdspi.v:474$91'.
  created $dff cell `$procdff$1515' with positive edge clock.
Creating register for signal `\sdspi.\spi_read_data' using process `\sdspi.$proc$sdspi.v:467$89'.
  created $dff cell `$procdff$1516' with positive edge clock.
Creating register for signal `\sdspi.\fifo_b_word' using process `\sdspi.$proc$sdspi.v:464$87'.
  created $dff cell `$procdff$1517' with positive edge clock.
Creating register for signal `\sdspi.\fifo_a_word' using process `\sdspi.$proc$sdspi.v:461$85'.
  created $dff cell `$procdff$1518' with positive edge clock.
Creating register for signal `\sdspi.$memwr$\fifo_b$sdspi.v:440$29_ADDR' using process `\sdspi.$proc$sdspi.v:438$71'.
  created $dff cell `$procdff$1519' with positive edge clock.
Creating register for signal `\sdspi.$memwr$\fifo_b$sdspi.v:440$29_DATA' using process `\sdspi.$proc$sdspi.v:438$71'.
  created $dff cell `$procdff$1520' with positive edge clock.
Creating register for signal `\sdspi.$memwr$\fifo_b$sdspi.v:440$29_EN' using process `\sdspi.$proc$sdspi.v:438$71'.
  created $dff cell `$procdff$1521' with positive edge clock.
Creating register for signal `\sdspi.$memwr$\fifo_a$sdspi.v:436$28_ADDR' using process `\sdspi.$proc$sdspi.v:434$64'.
  created $dff cell `$procdff$1522' with positive edge clock.
Creating register for signal `\sdspi.$memwr$\fifo_a$sdspi.v:436$28_DATA' using process `\sdspi.$proc$sdspi.v:434$64'.
  created $dff cell `$procdff$1523' with positive edge clock.
Creating register for signal `\sdspi.$memwr$\fifo_a$sdspi.v:436$28_EN' using process `\sdspi.$proc$sdspi.v:434$64'.
  created $dff cell `$procdff$1524' with positive edge clock.
Creating register for signal `\sdspi.\write_fifo_b_addr' using process `\sdspi.$proc$sdspi.v:420$57'.
  created $dff cell `$procdff$1525' with positive edge clock.
Creating register for signal `\sdspi.\write_fifo_b_data' using process `\sdspi.$proc$sdspi.v:420$57'.
  created $dff cell `$procdff$1526' with positive edge clock.
Creating register for signal `\sdspi.\write_fifo_b' using process `\sdspi.$proc$sdspi.v:420$57'.
  created $dff cell `$procdff$1527' with positive edge clock.
Creating register for signal `\sdspi.\write_fifo_a_addr' using process `\sdspi.$proc$sdspi.v:405$49'.
  created $dff cell `$procdff$1528' with positive edge clock.
Creating register for signal `\sdspi.\write_fifo_a_data' using process `\sdspi.$proc$sdspi.v:405$49'.
  created $dff cell `$procdff$1529' with positive edge clock.
Creating register for signal `\sdspi.\write_fifo_a' using process `\sdspi.$proc$sdspi.v:405$49'.
  created $dff cell `$procdff$1530' with positive edge clock.
Creating register for signal `\sdspi.\fifo_wb_addr' using process `\sdspi.$proc$sdspi.v:380$42'.
  created $dff cell `$procdff$1531' with positive edge clock.
Creating register for signal `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.\startup_hold' using process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:214$624'.
  created $dff cell `$procdff$1532' with positive edge clock.
Creating register for signal `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.\WAIT_FOR_STARTUP.startup_counter' using process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:214$624'.
  created $dff cell `$procdff$1533' with positive edge clock.
Creating register for signal `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.\powerup_hold' using process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:176$620'.
  created $dff cell `$procdff$1534' with positive edge clock.
Creating register for signal `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.\WAIT_FOR_POWERUP.powerup_counter' using process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:176$620'.
  created $dff cell `$procdff$1535' with positive edge clock.
Creating register for signal `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.\o_stb' using process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:443$609'.
  created $dff cell `$procdff$1536' with positive edge clock.
Creating register for signal `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.\o_mosi' using process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:412$599'.
  created $dff cell `$procdff$1537' with positive edge clock.
Creating register for signal `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.\r_byte' using process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:412$599'.
  created $dff cell `$procdff$1538' with positive edge clock.
Creating register for signal `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.\o_sclk' using process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:395$589'.
  created $dff cell `$procdff$1539' with positive edge clock.
Creating register for signal `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.\r_idle' using process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:375$583'.
  created $dff cell `$procdff$1540' with positive edge clock.
Creating register for signal `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.\o_byte' using process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:367$579'.
  created $dff cell `$procdff$1541' with positive edge clock.
Creating register for signal `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.\r_ireg' using process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:360$576'.
  created $dff cell `$procdff$1542' with positive edge clock.
Creating register for signal `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.\o_cs_n' using process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:315$566'.
  created $dff cell `$procdff$1543' with positive edge clock.
Creating register for signal `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.\r_state' using process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:315$566'.
  created $dff cell `$procdff$1544' with positive edge clock.
Creating register for signal `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.\r_z_counter' using process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:288$561'.
  created $dff cell `$procdff$1545' with positive edge clock.
Creating register for signal `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.\r_clk_counter' using process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:288$561'.
  created $dff cell `$procdff$1546' with positive edge clock.
Creating register for signal `\spicmd.\o_response' using process `\spicmd.$proc$spicmd.v:216$532'.
  created $dff cell `$procdff$1547' with positive edge clock.
Creating register for signal `\spicmd.\o_rxvalid' using process `\spicmd.$proc$spicmd.v:206$527'.
  created $dff cell `$procdff$1548' with positive edge clock.
Creating register for signal `\spicmd.\rx_r1_byte' using process `\spicmd.$proc$spicmd.v:180$512'.
  created $dff cell `$procdff$1549' with positive edge clock.
Creating register for signal `\spicmd.\rx_check_busy' using process `\spicmd.$proc$spicmd.v:180$512'.
  created $dff cell `$procdff$1550' with positive edge clock.
Creating register for signal `\spicmd.\rxvalid' using process `\spicmd.$proc$spicmd.v:180$512'.
  created $dff cell `$procdff$1551' with positive edge clock.
Creating register for signal `\spicmd.\rx_counter' using process `\spicmd.$proc$spicmd.v:180$512'.
  created $dff cell `$procdff$1552' with positive edge clock.
Creating register for signal `\spicmd.\crc_byte' using process `\spicmd.$proc$spicmd.v:169$510'.
  created $dff cell `$procdff$1553' with positive edge clock.
Creating register for signal `\spicmd.\crc_shift_reg' using process `\spicmd.$proc$spicmd.v:145$500'.
  created $dff cell `$procdff$1554' with positive edge clock.
Creating register for signal `\spicmd.\crc_busy' using process `\spicmd.$proc$spicmd.v:131$496'.
  created $dff cell `$procdff$1555' with positive edge clock.
Creating register for signal `\spicmd.\crc_bit_counter' using process `\spicmd.$proc$spicmd.v:131$496'.
  created $dff cell `$procdff$1556' with positive edge clock.
Creating register for signal `\spicmd.\crc_valid_sreg' using process `\spicmd.$proc$spicmd.v:120$492'.
  created $dff cell `$procdff$1557' with positive edge clock.
Creating register for signal `\spicmd.\o_cmd_sent' using process `\spicmd.$proc$spicmd.v:110$486'.
  created $dff cell `$procdff$1558' with positive edge clock.
Creating register for signal `\spicmd.\almost_sent' using process `\spicmd.$proc$spicmd.v:110$486'.
  created $dff cell `$procdff$1559' with positive edge clock.
Creating register for signal `\spicmd.\shift_data' using process `\spicmd.$proc$spicmd.v:93$482'.
  created $dff cell `$procdff$1560' with positive edge clock.
Creating register for signal `\spicmd.\o_busy' using process `\spicmd.$proc$spicmd.v:80$477'.
  created $dff cell `$procdff$1561' with positive edge clock.
Creating register for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\crc_err' using process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:355$456'.
  created $dff cell `$procdff$1562' with positive edge clock.
Creating register for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\crc_data' using process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:345$454'.
  created $dff cell `$procdff$1563' with positive edge clock.
Creating register for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\crc_gearbox' using process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:318$444'.
  created $dff cell `$procdff$1564' with positive edge clock.
Creating register for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\crc_active' using process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:298$433'.
  created $dff cell `$procdff$1565' with positive edge clock.
Creating register for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\crc_fill' using process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:298$433'.
  created $dff cell `$procdff$1566' with positive edge clock.
Creating register for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\lastaddr' using process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:259$418'.
  created $dff cell `$procdff$1567' with positive edge clock.
Creating register for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\r_lgblksz_m3' using process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:259$418'.
  created $dff cell `$procdff$1568' with positive edge clock.
Creating register for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\crc_byte' using process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:248$412'.
  created $dff cell `$procdff$1569' with positive edge clock.
Creating register for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\all_mem_written' using process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:238$408'.
  created $dff cell `$procdff$1570' with positive edge clock.
Creating register for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\lastdata' using process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:228$403'.
  created $dff cell `$procdff$1571' with positive edge clock.
Creating register for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\gearbox' using process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:207$397'.
  created $dff cell `$procdff$1572' with positive edge clock.
Creating register for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\fill' using process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:207$397'.
  created $dff cell `$procdff$1573' with positive edge clock.
Creating register for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\o_addr' using process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:197$392'.
  created $dff cell `$procdff$1574' with positive edge clock.
Creating register for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\o_data' using process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:185$389'.
  created $dff cell `$procdff$1575' with positive edge clock.
Creating register for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\o_write' using process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:173$382'.
  created $dff cell `$procdff$1576' with positive edge clock.
Creating register for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\o_response' using process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:161$375'.
  created $dff cell `$procdff$1577' with positive edge clock.
Creating register for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\o_rxvalid' using process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:151$371'.
  created $dff cell `$procdff$1578' with positive edge clock.
Creating register for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\o_busy' using process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:139$368'.
  created $dff cell `$procdff$1579' with positive edge clock.
Creating register for signal `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.\received_token' using process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:129$365'.
  created $dff cell `$procdff$1580' with positive edge clock.

16.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

16.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$351'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$350'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$349'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$348'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$347'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$346'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$345'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$344'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$343'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$342'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$341'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$340'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$339'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:0$338'.
Found and cleaned up 2 empty switches in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:373$336'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:373$336'.
Found and cleaned up 2 empty switches in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:357$328'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:357$328'.
Found and cleaned up 1 empty switch in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:344$326'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:344$326'.
Found and cleaned up 3 empty switches in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:324$317'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:324$317'.
Found and cleaned up 3 empty switches in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:292$305'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:292$305'.
Found and cleaned up 2 empty switches in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:281$297'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:281$297'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:274$296'.
Found and cleaned up 2 empty switches in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:265$293'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:265$293'.
Found and cleaned up 2 empty switches in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:255$289'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:255$289'.
Found and cleaned up 2 empty switches in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:245$284'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:245$284'.
Found and cleaned up 4 empty switches in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:226$265'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:226$265'.
Found and cleaned up 7 empty switches in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:169$255'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:169$255'.
Found and cleaned up 3 empty switches in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:157$250'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:157$250'.
Found and cleaned up 1 empty switch in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:147$247'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:147$247'.
Found and cleaned up 1 empty switch in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:134$246'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:134$246'.
Found and cleaned up 2 empty switches in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:125$240'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:125$240'.
Found and cleaned up 2 empty switches in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:113$235'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:113$235'.
Found and cleaned up 3 empty switches in `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:100$230'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:100$230'.
Removing empty process `$paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.$proc$spitxdata.v:93$225'.
Removing empty process `sdspi.$proc$sdspi.v:0$224'.
Removing empty process `sdspi.$proc$sdspi.v:0$223'.
Removing empty process `sdspi.$proc$sdspi.v:0$222'.
Removing empty process `sdspi.$proc$sdspi.v:0$221'.
Removing empty process `sdspi.$proc$sdspi.v:0$220'.
Removing empty process `sdspi.$proc$sdspi.v:0$219'.
Removing empty process `sdspi.$proc$sdspi.v:0$218'.
Removing empty process `sdspi.$proc$sdspi.v:0$217'.
Removing empty process `sdspi.$proc$sdspi.v:0$216'.
Removing empty process `sdspi.$proc$sdspi.v:0$215'.
Removing empty process `sdspi.$proc$sdspi.v:0$214'.
Removing empty process `sdspi.$proc$sdspi.v:0$213'.
Removing empty process `sdspi.$proc$sdspi.v:0$212'.
Removing empty process `sdspi.$proc$sdspi.v:0$211'.
Removing empty process `sdspi.$proc$sdspi.v:0$210'.
Removing empty process `sdspi.$proc$sdspi.v:0$209'.
Removing empty process `sdspi.$proc$sdspi.v:0$208'.
Removing empty process `sdspi.$proc$sdspi.v:0$207'.
Removing empty process `sdspi.$proc$sdspi.v:0$206'.
Removing empty process `sdspi.$proc$sdspi.v:0$205'.
Removing empty process `sdspi.$proc$sdspi.v:0$204'.
Found and cleaned up 2 empty switches in `\sdspi.$proc$sdspi.v:749$200'.
Removing empty process `sdspi.$proc$sdspi.v:749$200'.
Found and cleaned up 2 empty switches in `\sdspi.$proc$sdspi.v:742$194'.
Removing empty process `sdspi.$proc$sdspi.v:742$194'.
Removing empty process `sdspi.$proc$sdspi.v:738$193'.
Found and cleaned up 3 empty switches in `\sdspi.$proc$sdspi.v:729$190'.
Removing empty process `sdspi.$proc$sdspi.v:729$190'.
Removing empty process `sdspi.$proc$sdspi.v:801$169'.
Removing empty process `sdspi.$proc$sdspi.v:798$166'.
Found and cleaned up 2 empty switches in `\sdspi.$proc$sdspi.v:784$162'.
Removing empty process `sdspi.$proc$sdspi.v:784$162'.
Found and cleaned up 2 empty switches in `\sdspi.$proc$sdspi.v:777$159'.
Removing empty process `sdspi.$proc$sdspi.v:777$159'.
Removing empty process `sdspi.$proc$sdspi.v:706$152'.
Removing empty process `sdspi.$proc$sdspi.v:702$151'.
Found and cleaned up 1 empty switch in `\sdspi.$proc$sdspi.v:687$149'.
Removing empty process `sdspi.$proc$sdspi.v:687$149'.
Found and cleaned up 1 empty switch in `\sdspi.$proc$sdspi.v:680$147'.
Removing empty process `sdspi.$proc$sdspi.v:680$147'.
Found and cleaned up 1 empty switch in `\sdspi.$proc$sdspi.v:667$146'.
Removing empty process `sdspi.$proc$sdspi.v:667$146'.
Removing empty process `sdspi.$proc$sdspi.v:659$144'.
Removing empty process `sdspi.$proc$sdspi.v:656$143'.
Found and cleaned up 4 empty switches in `\sdspi.$proc$sdspi.v:626$135'.
Removing empty process `sdspi.$proc$sdspi.v:626$135'.
Found and cleaned up 4 empty switches in `\sdspi.$proc$sdspi.v:598$122'.
Removing empty process `sdspi.$proc$sdspi.v:598$122'.
Found and cleaned up 6 empty switches in `\sdspi.$proc$sdspi.v:569$117'.
Removing empty process `sdspi.$proc$sdspi.v:569$117'.
Found and cleaned up 5 empty switches in `\sdspi.$proc$sdspi.v:543$111'.
Removing empty process `sdspi.$proc$sdspi.v:543$111'.
Found and cleaned up 8 empty switches in `\sdspi.$proc$sdspi.v:484$94'.
Removing empty process `sdspi.$proc$sdspi.v:484$94'.
Found and cleaned up 1 empty switch in `\sdspi.$proc$sdspi.v:474$91'.
Removing empty process `sdspi.$proc$sdspi.v:474$91'.
Found and cleaned up 1 empty switch in `\sdspi.$proc$sdspi.v:467$89'.
Removing empty process `sdspi.$proc$sdspi.v:467$89'.
Removing empty process `sdspi.$proc$sdspi.v:464$87'.
Removing empty process `sdspi.$proc$sdspi.v:461$85'.
Found and cleaned up 1 empty switch in `\sdspi.$proc$sdspi.v:455$82'.
Removing empty process `sdspi.$proc$sdspi.v:455$82'.
Found and cleaned up 1 empty switch in `\sdspi.$proc$sdspi.v:449$78'.
Removing empty process `sdspi.$proc$sdspi.v:449$78'.
Found and cleaned up 1 empty switch in `\sdspi.$proc$sdspi.v:438$71'.
Removing empty process `sdspi.$proc$sdspi.v:438$71'.
Found and cleaned up 1 empty switch in `\sdspi.$proc$sdspi.v:434$64'.
Removing empty process `sdspi.$proc$sdspi.v:434$64'.
Found and cleaned up 1 empty switch in `\sdspi.$proc$sdspi.v:420$57'.
Removing empty process `sdspi.$proc$sdspi.v:420$57'.
Found and cleaned up 1 empty switch in `\sdspi.$proc$sdspi.v:405$49'.
Removing empty process `sdspi.$proc$sdspi.v:405$49'.
Found and cleaned up 2 empty switches in `\sdspi.$proc$sdspi.v:380$42'.
Removing empty process `sdspi.$proc$sdspi.v:380$42'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$644'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$643'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$642'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$641'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$640'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$639'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$638'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$637'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$636'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$635'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$634'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$633'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:0$632'.
Found and cleaned up 3 empty switches in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:214$624'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:214$624'.
Found and cleaned up 3 empty switches in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:176$620'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:176$620'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:452$618'.
Found and cleaned up 1 empty switch in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:443$609'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:443$609'.
Found and cleaned up 7 empty switches in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:412$599'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:412$599'.
Found and cleaned up 3 empty switches in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:395$589'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:395$589'.
Found and cleaned up 5 empty switches in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:375$583'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:375$583'.
Found and cleaned up 1 empty switch in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:367$579'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:367$579'.
Found and cleaned up 1 empty switch in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:360$576'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:360$576'.
Found and cleaned up 11 empty switches in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:315$566'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:315$566'.
Found and cleaned up 2 empty switches in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:288$561'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:288$561'.
Found and cleaned up 6 empty switches in `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:264$547'.
Removing empty process `$paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.$proc$llsdspi.v:264$547'.
Removing empty process `spicmd.$proc$spicmd.v:0$545'.
Removing empty process `spicmd.$proc$spicmd.v:0$544'.
Removing empty process `spicmd.$proc$spicmd.v:0$543'.
Removing empty process `spicmd.$proc$spicmd.v:0$542'.
Removing empty process `spicmd.$proc$spicmd.v:0$541'.
Removing empty process `spicmd.$proc$spicmd.v:0$540'.
Removing empty process `spicmd.$proc$spicmd.v:0$539'.
Removing empty process `spicmd.$proc$spicmd.v:0$538'.
Removing empty process `spicmd.$proc$spicmd.v:0$537'.
Removing empty process `spicmd.$proc$spicmd.v:0$536'.
Removing empty process `spicmd.$proc$spicmd.v:0$535'.
Found and cleaned up 3 empty switches in `\spicmd.$proc$spicmd.v:216$532'.
Removing empty process `spicmd.$proc$spicmd.v:216$532'.
Found and cleaned up 2 empty switches in `\spicmd.$proc$spicmd.v:206$527'.
Removing empty process `spicmd.$proc$spicmd.v:206$527'.
Found and cleaned up 5 empty switches in `\spicmd.$proc$spicmd.v:180$512'.
Removing empty process `spicmd.$proc$spicmd.v:180$512'.
Found and cleaned up 2 empty switches in `\spicmd.$proc$spicmd.v:169$510'.
Removing empty process `spicmd.$proc$spicmd.v:169$510'.
Found and cleaned up 2 empty switches in `\spicmd.$proc$spicmd.v:154$503'.
Removing empty process `spicmd.$proc$spicmd.v:154$503'.
Found and cleaned up 2 empty switches in `\spicmd.$proc$spicmd.v:145$500'.
Removing empty process `spicmd.$proc$spicmd.v:145$500'.
Found and cleaned up 2 empty switches in `\spicmd.$proc$spicmd.v:131$496'.
Removing empty process `spicmd.$proc$spicmd.v:131$496'.
Found and cleaned up 2 empty switches in `\spicmd.$proc$spicmd.v:120$492'.
Removing empty process `spicmd.$proc$spicmd.v:120$492'.
Found and cleaned up 2 empty switches in `\spicmd.$proc$spicmd.v:110$486'.
Removing empty process `spicmd.$proc$spicmd.v:110$486'.
Found and cleaned up 3 empty switches in `\spicmd.$proc$spicmd.v:93$482'.
Removing empty process `spicmd.$proc$spicmd.v:93$482'.
Found and cleaned up 3 empty switches in `\spicmd.$proc$spicmd.v:80$477'.
Removing empty process `spicmd.$proc$spicmd.v:80$477'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$476'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$475'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$474'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$473'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$472'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$471'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$470'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$469'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$468'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$467'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$466'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$465'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$464'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$463'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:0$462'.
Found and cleaned up 2 empty switches in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:355$456'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:355$456'.
Found and cleaned up 2 empty switches in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:345$454'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:345$454'.
Found and cleaned up 2 empty switches in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:328$446'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:328$446'.
Found and cleaned up 1 empty switch in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:318$444'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:318$444'.
Found and cleaned up 3 empty switches in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:298$433'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:298$433'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:290$430'.
Found and cleaned up 3 empty switches in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:259$418'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:259$418'.
Found and cleaned up 2 empty switches in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:248$412'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:248$412'.
Found and cleaned up 2 empty switches in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:238$408'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:238$408'.
Found and cleaned up 2 empty switches in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:228$403'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:228$403'.
Found and cleaned up 4 empty switches in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:207$397'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:207$397'.
Found and cleaned up 2 empty switches in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:197$392'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:197$392'.
Found and cleaned up 1 empty switch in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:185$389'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:185$389'.
Found and cleaned up 2 empty switches in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:173$382'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:173$382'.
Found and cleaned up 3 empty switches in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:161$375'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:161$375'.
Found and cleaned up 2 empty switches in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:151$371'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:151$371'.
Found and cleaned up 3 empty switches in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:139$368'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:139$368'.
Found and cleaned up 2 empty switches in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:129$365'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:129$365'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:122$362'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:116$360'.
Found and cleaned up 2 empty switches in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:103$356'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:103$356'.
Found and cleaned up 2 empty switches in `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:90$352'.
Removing empty process `$paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.$proc$spirxdata.v:90$352'.
Cleaned up 206 empty switches.

16.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.
<suppressed ~22 debug messages>
Optimizing module sdspi.
<suppressed ~30 debug messages>
Optimizing module $paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.
<suppressed ~29 debug messages>
Optimizing module spicmd.
<suppressed ~24 debug messages>
Optimizing module $paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.
<suppressed ~18 debug messages>

16.3. Executing FLATTEN pass (flatten design).
Deleting now unused module $paramod$70e26f9c850fc4e0dd156ef2c70e5bb72f9a4602\spitxdata.
Deleting now unused module $paramod$501fb2a4b8fb16b37629dcaa188e68e5574895dc\llsdspi.
Deleting now unused module spicmd.
Deleting now unused module $paramod\spirxdata\OPT_LITTLE_ENDIAN=1'0.
<suppressed ~4 debug messages>

16.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module sdspi.
<suppressed ~6 debug messages>

16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sdspi..
Removed 47 unused cells and 666 unused wires.
<suppressed ~49 debug messages>

16.6. Executing CHECK pass (checking for obvious problems).
Checking module sdspi...
Found and reported 0 problems.

16.7. Executing OPT pass (performing simple optimizations).

16.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sdspi.

16.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sdspi'.
<suppressed ~309 debug messages>
Removed a total of 103 cells.

16.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sdspi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $flatten\lowlevel.$procmux$1166: \lowlevel.r_z_counter -> 1'1
      Replacing known input bits on port B of cell $flatten\spicmdi.$procmux$1276: \spicmdi.rx_r1_byte -> 1'1
      Replacing known input bits on port A of cell $flatten\spicmdi.$procmux$1304: \spicmdi.crc_busy -> 1'0
      Replacing known input bits on port B of cell $flatten\spirxdatai.$procmux$1402: \spirxdatai.lastdata -> 1'1
      Replacing known input bits on port A of cell $flatten\spirxdatai.$procmux$1443: \spirxdatai.o_busy -> 1'1
      Replacing known input bits on port A of cell $flatten\spitxdatai.$procmux$819: \spitxdatai.o_busy -> 1'1
      Replacing known input bits on port A of cell $flatten\lowlevel.$procmux$1057: \lowlevel.powerup_hold -> 1'0
      Replacing known input bits on port A of cell $procmux$978: \r_cmd_busy -> 1'1
  Analyzing evaluation results.
    dead port 1/2 on $mux $flatten\lowlevel.$procmux$1181.
    dead port 1/2 on $mux $flatten\lowlevel.$procmux$1184.
    dead port 1/2 on $mux $flatten\lowlevel.$procmux$1187.
    dead port 1/2 on $mux $flatten\lowlevel.$procmux$1196.
    dead port 1/2 on $mux $flatten\lowlevel.$procmux$1199.
    dead port 1/2 on $mux $flatten\lowlevel.$procmux$1202.
    dead port 1/2 on $mux $flatten\lowlevel.$procmux$1208.
    dead port 1/2 on $mux $flatten\lowlevel.$procmux$1211.
    dead port 1/2 on $mux $flatten\lowlevel.$procmux$1214.
    dead port 1/2 on $mux $flatten\lowlevel.$procmux$1220.
    dead port 1/2 on $mux $flatten\lowlevel.$procmux$1223.
    dead port 1/2 on $mux $flatten\lowlevel.$procmux$1229.
    dead port 2/2 on $mux $ternary$sdspi.v:605$124.
Removed 13 multiplexer ports.
<suppressed ~123 debug messages>

16.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sdspi.
    Consolidated identical input bits for $mux cell $procmux$1007:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0]
      New connections: $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [31:1] = { $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] $0$memwr$\fifo_a$sdspi.v:436$28_EN[31:0]$67 [0] }
    Consolidated identical input bits for $mux cell $procmux$998:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74
      New ports: A=1'0, B=1'1, Y=$0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0]
      New connections: $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [31:1] = { $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] $0$memwr$\fifo_b$sdspi.v:440$29_EN[31:0]$74 [0] }
  Optimizing cells in module \sdspi.
Performed a total of 2 changes.

16.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sdspi'.
Removed a total of 0 cells.

16.7.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 17 on $procdff$1493 ($dff) from module sdspi.
Setting constant 0-bit at position 18 on $procdff$1493 ($dff) from module sdspi.
Setting constant 0-bit at position 19 on $procdff$1493 ($dff) from module sdspi.
Setting constant 0-bit at position 21 on $procdff$1493 ($dff) from module sdspi.
Setting constant 0-bit at position 22 on $procdff$1493 ($dff) from module sdspi.
Setting constant 0-bit at position 23 on $procdff$1493 ($dff) from module sdspi.

16.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sdspi..
Removed 0 unused cells and 114 unused wires.
<suppressed ~1 debug messages>

16.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sdspi.

16.7.9. Rerunning OPT passes. (Maybe there is more to do..)

16.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sdspi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~123 debug messages>

16.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sdspi.
Performed a total of 0 changes.

16.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sdspi'.
Removed a total of 0 cells.

16.7.13. Executing OPT_DFF pass (perform DFF optimizations).

16.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sdspi..

16.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module sdspi.

16.7.16. Finished OPT passes. (There is nothing left to do.)

16.8. Executing FSM pass (extract and optimize FSM).

16.8.1. Executing FSM_DETECT pass (finding FSMs in design).

16.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

16.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

16.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sdspi..

16.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

16.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

16.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

16.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

16.9. Executing OPT pass (performing simple optimizations).

16.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sdspi.

16.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sdspi'.
Removed a total of 0 cells.

16.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sdspi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~123 debug messages>

16.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sdspi.
Performed a total of 0 changes.

16.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sdspi'.
Removed a total of 0 cells.

16.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$1531 ($dff) from module sdspi (D = $procmux$1033_Y, Q = \fifo_wb_addr, rval = 7'0000000).
Adding EN signal on $auto$ff.cc:266:slice$1596 ($sdff) from module sdspi (D = $add$sdspi.v:390$48_Y [6:0], Q = \fifo_wb_addr).
Adding EN signal on $procdff$1515 ($dff) from module sdspi (D = \i_wb_data [12], Q = \r_fifo_id).
Adding SRST signal on $procdff$1514 ($dff) from module sdspi (D = $procmux$935_Y, Q = \tx_start, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1599 ($sdff) from module sdspi (D = $procmux$935_Y, Q = \tx_start).
Adding SRST signal on $procdff$1513 ($dff) from module sdspi (D = $procmux$951_Y, Q = \rx_start, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1603 ($sdff) from module sdspi (D = $procmux$951_Y, Q = \rx_start).
Adding EN signal on $procdff$1512 ($dff) from module sdspi (D = \i_wb_data [10], Q = \write_to_card).
Adding SRST signal on $procdff$1511 ($dff) from module sdspi (D = $procmux$973_Y, Q = \r_use_fifo, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1614 ($sdff) from module sdspi (D = $procmux$973_Y, Q = \r_use_fifo).
Adding SRST signal on $procdff$1510 ($dff) from module sdspi (D = $procmux$981_Y, Q = \r_cmd_busy, rval = 1'0).
Adding SRST signal on $procdff$1509 ($dff) from module sdspi (D = $procmux$919_Y, Q = \r_cmd_err, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$1623 ($sdff) from module sdspi (D = $procmux$919_Y, Q = \r_cmd_err).
Adding EN signal on $procdff$1508 ($dff) from module sdspi (D = \spicmdi.o_response [39:32], Q = \r_last_r_one).
Adding EN signal on $procdff$1507 ($dff) from module sdspi (D = $0\r_data_reg[31:0], Q = \r_data_reg).
Adding EN signal on $procdff$1506 ($dff) from module sdspi (D = $procmux$877_Y, Q = \ll_cmd_dat).
Adding SRST signal on $procdff$1505 ($dff) from module sdspi (D = $procmux$884_Y, Q = \ll_cmd_stb, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1642 ($sdff) from module sdspi (D = $procmux$882_Y, Q = \ll_cmd_stb).
Adding SRST signal on $procdff$1504 ($dff) from module sdspi (D = $procmux$868_Y, Q = \r_sdspi_clk, rval = 8'01111100).
Adding EN signal on $auto$ff.cc:266:slice$1646 ($sdff) from module sdspi (D = \r_data_reg [7:0], Q = \r_sdspi_clk).
Adding EN signal on $procdff$1503 ($dff) from module sdspi (D = \r_data_reg [19:16], Q = \r_lgblklen).
Adding SRST signal on $procdff$1500 ($dff) from module sdspi (D = \i_wb_stb, Q = \dly_stb, rval = 1'0).
Adding SRST signal on $procdff$1499 ($dff) from module sdspi (D = \dly_stb, Q = \o_wb_ack, rval = 1'0).
Adding SRST signal on $procdff$1496 ($dff) from module sdspi (D = $procmux$850_Y, Q = \r_watchdog_err, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1655 ($sdff) from module sdspi (D = 1'1, Q = \r_watchdog_err).
Adding SRST signal on $procdff$1495 ($dff) from module sdspi (D = $procmux$845_Y, Q = \r_watchdog, rval = 26'00001111111111111111111111).
Adding EN signal on $auto$ff.cc:266:slice$1657 ($sdff) from module sdspi (D = $sub$sdspi.v:788$165_Y, Q = \r_watchdog).
Adding SRST signal on $procdff$1492 ($dff) from module sdspi (D = $procmux$837_Y, Q = \GEN_CARD_DETECT.r_card_removed, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$1659 ($sdff) from module sdspi (D = 1'0, Q = \GEN_CARD_DETECT.r_card_removed).
Adding SRST signal on $procdff$1490 ($dff) from module sdspi (D = $procmux$832_Y, Q = \GEN_CARD_DETECT.card_detect_counter, rval = 10'0000000000).
Adding EN signal on $auto$ff.cc:266:slice$1665 ($sdff) from module sdspi (D = $add$sdspi.v:746$199_Y [9:0], Q = \GEN_CARD_DETECT.card_detect_counter).
Adding SRST signal on $procdff$1489 ($dff) from module sdspi (D = $procmux$827_Y, Q = \GEN_CARD_DETECT.r_card_present, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1667 ($sdff) from module sdspi (D = 1'1, Q = \GEN_CARD_DETECT.r_card_present).
Adding SRST signal on $flatten\spitxdatai.$procdff$1488 ($dff) from module sdspi (D = $flatten\spitxdatai.$procmux$822_Y, Q = \spitxdatai.o_busy, rval = 1'0).
Adding SRST signal on $flatten\spitxdatai.$procdff$1487 ($dff) from module sdspi (D = $flatten\spitxdatai.$procmux$808_Y, Q = \spitxdatai.received_token, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1670 ($sdff) from module sdspi (D = 1'1, Q = \spitxdatai.received_token).
Adding SRST signal on $flatten\spitxdatai.$procdff$1486 ($dff) from module sdspi (D = $flatten\spitxdatai.$procmux$814_Y, Q = \spitxdatai.o_rxvalid, rval = 1'0).
Adding SRST signal on $flatten\spitxdatai.$procdff$1485 ($dff) from module sdspi (D = $flatten\spitxdatai.$procmux$802_Y, Q = \spitxdatai.all_idle, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1673 ($sdff) from module sdspi (D = 1'1, Q = \spitxdatai.all_idle).
Adding EN signal on $flatten\spitxdatai.$procdff$1484 ($dff) from module sdspi (D = \lowlevel.o_byte, Q = \spitxdatai.o_response).
Adding SRST signal on $flatten\spitxdatai.$procdff$1483 ($dff) from module sdspi (D = { \spitxdatai.rdvalid [0] \spitxdatai.o_read }, Q = \spitxdatai.rdvalid, rval = 2'00).
Adding SRST signal on $flatten\spitxdatai.$procdff$1482 ($dff) from module sdspi (D = $flatten\spitxdatai.$procmux$792_Y, Q = \spitxdatai.o_ll_stb, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1677 ($sdff) from module sdspi (D = $flatten\spitxdatai.$procmux$792_Y, Q = \spitxdatai.o_ll_stb).
Adding SRST signal on $flatten\spitxdatai.$procdff$1481 ($dff) from module sdspi (D = { $flatten\spitxdatai.$procmux$744_Y $flatten\spitxdatai.$procmux$784_Y }, Q = \spitxdatai.fill, rval = 5'00000).
Adding EN signal on $auto$ff.cc:266:slice$1681 ($sdff) from module sdspi (D = $flatten\spitxdatai.$procmux$784_Y, Q = \spitxdatai.fill [3:0]).
Adding EN signal on $auto$ff.cc:266:slice$1681 ($sdff) from module sdspi (D = $flatten\spitxdatai.$procmux$744_Y, Q = \spitxdatai.fill [4]).
Adding SRST signal on $flatten\spitxdatai.$procdff$1480 ($dff) from module sdspi (D = $flatten\spitxdatai.$procmux$766_Y, Q = \spitxdatai.gearbox [39:32], rval = 8'11111110).
Adding EN signal on $flatten\spitxdatai.$procdff$1480 ($dff) from module sdspi (D = $flatten\spitxdatai.$0\gearbox[39:0] [31:0], Q = \spitxdatai.gearbox [31:0]).
Adding EN signal on $auto$ff.cc:266:slice$1692 ($sdff) from module sdspi (D = \spitxdatai.gearbox [31:24], Q = \spitxdatai.gearbox [39:32]).
Adding SRST signal on $flatten\spitxdatai.$procdff$1479 ($dff) from module sdspi (D = $flatten\spitxdatai.$logic_and$spitxdata.v:237$283_Y, Q = \spitxdatai.crc_stb, rval = 1'0).
Adding SRST signal on $flatten\spitxdatai.$procdff$1478 ($dff) from module sdspi (D = $flatten\spitxdatai.$procmux$724_Y, Q = \spitxdatai.o_read, rval = 1'0).
Adding SRST signal on $flatten\spitxdatai.$procdff$1477 ($dff) from module sdspi (D = $flatten\spitxdatai.$procmux$706_Y, Q = \spitxdatai.o_addr [6:0], rval = 7'0000000).
Adding EN signal on $flatten\spitxdatai.$procdff$1477 ($dff) from module sdspi (D = \r_fifo_id, Q = \spitxdatai.o_addr [7]).
Adding EN signal on $auto$ff.cc:266:slice$1724 ($sdff) from module sdspi (D = $flatten\spitxdatai.$add$spitxdata.v:249$288_Y [6:0], Q = \spitxdatai.o_addr [6:0]).
Adding SRST signal on $flatten\spitxdatai.$procdff$1476 ($dff) from module sdspi (D = $flatten\spitxdatai.$procmux$698_Y, Q = \spitxdatai.all_mem_read, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1728 ($sdff) from module sdspi (D = 1'1, Q = \spitxdatai.all_mem_read).
Adding SRST signal on $flatten\spitxdatai.$procdff$1475 ($dff) from module sdspi (D = $flatten\spitxdatai.$procmux$693_Y, Q = \spitxdatai.crc_flag, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1730 ($sdff) from module sdspi (D = 1'1, Q = \spitxdatai.crc_flag).
Adding SRST signal on $flatten\spitxdatai.$procdff$1474 ($dff) from module sdspi (D = $flatten\spitxdatai.$procmux$688_Y, Q = \spitxdatai.data_sent, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1732 ($sdff) from module sdspi (D = 1'1, Q = \spitxdatai.data_sent).
Adding EN signal on $flatten\spitxdatai.$procdff$1473 ($dff) from module sdspi (D = $flatten\spirxdatai.$sub$spirxdata.v:264$421_Y [2:0], Q = \spitxdatai.r_lgblksz_m3).
Adding EN signal on $flatten\spitxdatai.$procdff$1472 ($dff) from module sdspi (D = $flatten\spitxdatai.$0\lastaddr[0:0], Q = \spitxdatai.lastaddr).
Adding SRST signal on $flatten\spitxdatai.$procdff$1471 ($dff) from module sdspi (D = $flatten\spitxdatai.$procmux$659_Y, Q = \spitxdatai.crc_fill, rval = 5'00000).
Adding EN signal on $auto$ff.cc:266:slice$1742 ($sdff) from module sdspi (D = $flatten\spitxdatai.$add$spitxdata.v:332$324_Y [4:0], Q = \spitxdatai.crc_fill).
Adding SRST signal on $flatten\spitxdatai.$procdff$1470 ($dff) from module sdspi (D = $flatten\spitxdatai.$procmux$667_Y, Q = \spitxdatai.crc_active, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1744 ($sdff) from module sdspi (D = $flatten\spitxdatai.$procmux$665_Y, Q = \spitxdatai.crc_active).
Adding SRST signal on $flatten\spitxdatai.$procdff$1469 ($dff) from module sdspi (D = \spi_read_data [1:0], Q = \spitxdatai.crc_gearbox [1:0], rval = 2'00).
Adding SRST signal on $flatten\spitxdatai.$procdff$1468 ($dff) from module sdspi (D = $flatten\spitxdatai.$procmux$645_Y, Q = \spitxdatai.crc_data, rval = 16'0000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$1748 ($sdff) from module sdspi (D = \spitxdatai.next_crc_data, Q = \spitxdatai.crc_data).
Adding SRST signal on $flatten\spirxdatai.$procdff$1580 ($dff) from module sdspi (D = $flatten\spirxdatai.$procmux$1451_Y, Q = \spirxdatai.received_token, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1750 ($sdff) from module sdspi (D = 1'1, Q = \spirxdatai.received_token).
Adding SRST signal on $flatten\spirxdatai.$procdff$1579 ($dff) from module sdspi (D = $flatten\spirxdatai.$procmux$1446_Y, Q = \spirxdatai.o_busy, rval = 1'0).
Adding SRST signal on $flatten\spirxdatai.$procdff$1578 ($dff) from module sdspi (D = $flatten\spirxdatai.$procmux$1438_Y, Q = \spirxdatai.o_rxvalid, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1753 ($sdff) from module sdspi (D = 1'1, Q = \spirxdatai.o_rxvalid).
Adding SRST signal on $flatten\spirxdatai.$procdff$1577 ($dff) from module sdspi (D = $flatten\spirxdatai.$procmux$1433_Y, Q = \spirxdatai.o_response, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:266:slice$1755 ($sdff) from module sdspi (D = $flatten\spirxdatai.$procmux$1433_Y, Q = \spirxdatai.o_response).
Adding SRST signal on $flatten\spirxdatai.$procdff$1576 ($dff) from module sdspi (D = $flatten\spirxdatai.$logic_and$spirxdata.v:177$388_Y, Q = \spirxdatai.o_write, rval = 1'0).
Adding EN signal on $flatten\spirxdatai.$procdff$1575 ($dff) from module sdspi (D = { \spirxdatai.gearbox \lowlevel.o_byte }, Q = \spirxdatai.o_data).
Adding SRST signal on $flatten\spirxdatai.$procdff$1574 ($dff) from module sdspi (D = $flatten\spirxdatai.$procmux$1417_Y [6:0], Q = \spirxdatai.o_addr [6:0], rval = 7'0000000).
Adding EN signal on $flatten\spirxdatai.$procdff$1574 ($dff) from module sdspi (D = $flatten\spirxdatai.$0\o_addr[7:0] [7], Q = \spirxdatai.o_addr [7]).
Adding EN signal on $auto$ff.cc:266:slice$1765 ($sdff) from module sdspi (D = $flatten\spirxdatai.$add$spirxdata.v:201$396_Y [6:0], Q = \spirxdatai.o_addr [6:0]).
Adding SRST signal on $flatten\spirxdatai.$procdff$1573 ($dff) from module sdspi (D = $flatten\spirxdatai.$procmux$1407_Y, Q = \spirxdatai.fill, rval = 3'000).
Adding EN signal on $auto$ff.cc:266:slice$1771 ($sdff) from module sdspi (D = { \spirxdatai.fill [1:0] 1'1 }, Q = \spirxdatai.fill).
Adding EN signal on $flatten\spirxdatai.$procdff$1572 ($dff) from module sdspi (D = { \spirxdatai.gearbox [15:0] \lowlevel.o_byte }, Q = \spirxdatai.gearbox).
Adding SRST signal on $flatten\spirxdatai.$procdff$1571 ($dff) from module sdspi (D = $flatten\spirxdatai.$procmux$1402_Y, Q = \spirxdatai.lastdata, rval = 1'0).
Adding SRST signal on $flatten\spirxdatai.$procdff$1570 ($dff) from module sdspi (D = $flatten\spirxdatai.$procmux$1397_Y, Q = \spirxdatai.all_mem_written, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1777 ($sdff) from module sdspi (D = 1'1, Q = \spirxdatai.all_mem_written).
Adding SRST signal on $flatten\spirxdatai.$procdff$1569 ($dff) from module sdspi (D = $flatten\spirxdatai.$procmux$1392_Y, Q = \spirxdatai.crc_byte, rval = 2'00).
Adding EN signal on $auto$ff.cc:266:slice$1779 ($sdff) from module sdspi (D = $flatten\spirxdatai.$add$spirxdata.v:252$417_Y [1:0], Q = \spirxdatai.crc_byte).
Adding EN signal on $flatten\spirxdatai.$procdff$1568 ($dff) from module sdspi (D = $flatten\spirxdatai.$sub$spirxdata.v:264$421_Y [2:0], Q = \spirxdatai.r_lgblksz_m3).
Adding EN signal on $flatten\spirxdatai.$procdff$1567 ($dff) from module sdspi (D = $flatten\spirxdatai.$0\lastaddr[0:0], Q = \spirxdatai.lastaddr).
Adding SRST signal on $flatten\spirxdatai.$procdff$1566 ($dff) from module sdspi (D = $flatten\spirxdatai.$procmux$1363_Y, Q = \spirxdatai.crc_fill, rval = 4'0000).
Adding EN signal on $auto$ff.cc:266:slice$1785 ($sdff) from module sdspi (D = $flatten\spirxdatai.$add$spirxdata.v:306$442_Y [3:0], Q = \spirxdatai.crc_fill).
Adding SRST signal on $flatten\spirxdatai.$procdff$1565 ($dff) from module sdspi (D = $flatten\spirxdatai.$procmux$1371_Y, Q = \spirxdatai.crc_active, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1787 ($sdff) from module sdspi (D = $flatten\spirxdatai.$procmux$1369_Y, Q = \spirxdatai.crc_active).
Adding SRST signal on $flatten\spirxdatai.$procdff$1564 ($dff) from module sdspi (D = \lowlevel.o_byte [1:0], Q = \spirxdatai.crc_gearbox [1:0], rval = 2'00).
Adding SRST signal on $flatten\spirxdatai.$procdff$1563 ($dff) from module sdspi (D = $flatten\spirxdatai.$procmux$1349_Y, Q = \spirxdatai.crc_data, rval = 16'0000000000000000).
Adding EN signal on $auto$ff.cc:266:slice$1791 ($sdff) from module sdspi (D = \spirxdatai.next_crc_data, Q = \spirxdatai.crc_data).
Adding SRST signal on $flatten\spirxdatai.$procdff$1562 ($dff) from module sdspi (D = $flatten\spirxdatai.$procmux$1344_Y, Q = \spirxdatai.crc_err, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1793 ($sdff) from module sdspi (D = $flatten\spirxdatai.$ne$spirxdata.v:359$461_Y, Q = \spirxdatai.crc_err).
Adding SRST signal on $flatten\spicmdi.$procdff$1561 ($dff) from module sdspi (D = $flatten\spicmdi.$procmux$1339_Y, Q = \spicmdi.o_busy, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1795 ($sdff) from module sdspi (D = $flatten\spicmdi.$procmux$1339_Y, Q = \spicmdi.o_busy).
Adding SRST signal on $flatten\spicmdi.$procdff$1560 ($dff) from module sdspi (D = $flatten\spicmdi.$procmux$1326_Y [7:6], Q = \spicmdi.shift_data [39:38], rval = 2'01).
Adding EN signal on $flatten\spicmdi.$procdff$1560 ($dff) from module sdspi (D = $flatten\spicmdi.$0\shift_data[39:0] [37:0], Q = \spicmdi.shift_data [37:0]).
Adding EN signal on $auto$ff.cc:266:slice$1799 ($sdff) from module sdspi (D = $flatten\spicmdi.$procmux$1324_Y [7:6], Q = \spicmdi.shift_data [39:38]).
Adding SRST signal on $flatten\spicmdi.$procdff$1559 ($dff) from module sdspi (D = $flatten\spicmdi.$procmux$1319_Y, Q = \spicmdi.almost_sent, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1805 ($sdff) from module sdspi (D = \spicmdi.crc_valid_sreg [0], Q = \spicmdi.almost_sent).
Adding SRST signal on $flatten\spicmdi.$procdff$1558 ($dff) from module sdspi (D = $flatten\spicmdi.$procmux$1314_Y, Q = \spicmdi.o_cmd_sent, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1807 ($sdff) from module sdspi (D = \spicmdi.almost_sent, Q = \spicmdi.o_cmd_sent).
Adding SRST signal on $flatten\spicmdi.$procdff$1557 ($dff) from module sdspi (D = $flatten\spicmdi.$procmux$1309_Y, Q = \spicmdi.crc_valid_sreg, rval = 5'10000).
Adding EN signal on $auto$ff.cc:266:slice$1809 ($sdff) from module sdspi (D = { 1'0 \spicmdi.crc_valid_sreg [4:1] }, Q = \spicmdi.crc_valid_sreg).
Adding SRST signal on $flatten\spicmdi.$procdff$1556 ($dff) from module sdspi (D = $flatten\spicmdi.$procmux$1299_Y, Q = \spicmdi.crc_bit_counter, rval = 5'10100).
Adding EN signal on $auto$ff.cc:266:slice$1811 ($sdff) from module sdspi (D = $flatten\spicmdi.$sub$spicmd.v:138$498_Y [4:0], Q = \spicmdi.crc_bit_counter).
Adding SRST signal on $flatten\spicmdi.$procdff$1554 ($dff) from module sdspi (D = $flatten\spicmdi.$procmux$1294_Y [39:38], Q = \spicmdi.crc_shift_reg [39:38], rval = 2'01).
Adding EN signal on $flatten\spicmdi.$procdff$1554 ($dff) from module sdspi (D = $flatten\spicmdi.$0\crc_shift_reg[39:0] [37:0], Q = \spicmdi.crc_shift_reg [37:0]).
Adding EN signal on $auto$ff.cc:266:slice$1813 ($sdff) from module sdspi (D = \spicmdi.crc_shift_reg [37:36], Q = \spicmdi.crc_shift_reg [39:38]).
Adding SRST signal on $flatten\spicmdi.$procdff$1553 ($dff) from module sdspi (D = $flatten\spicmdi.$procmux$1283_Y, Q = \spicmdi.crc_byte, rval = 8'00000001).
Adding EN signal on $auto$ff.cc:266:slice$1819 ($sdff) from module sdspi (D = { \spicmdi.next_crc_byte 1'1 }, Q = \spicmdi.crc_byte).
Adding EN signal on $flatten\spicmdi.$procdff$1552 ($dff) from module sdspi (D = $flatten\spicmdi.$0\rx_counter[2:0], Q = \spicmdi.rx_counter).
Adding SRST signal on $flatten\spicmdi.$procdff$1551 ($dff) from module sdspi (D = $flatten\spicmdi.$procmux$1264_Y, Q = \spicmdi.rxvalid, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1828 ($sdff) from module sdspi (D = $flatten\spicmdi.$le$spicmd.v:195$524_Y, Q = \spicmdi.rxvalid).
Adding EN signal on $flatten\spicmdi.$procdff$1550 ($dff) from module sdspi (D = $flatten\spicmdi.$0\rx_check_busy[0:0], Q = \spicmdi.rx_check_busy).
Adding SRST signal on $flatten\spicmdi.$procdff$1549 ($dff) from module sdspi (D = $flatten\spicmdi.$procmux$1278_Y, Q = \spicmdi.rx_r1_byte, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1839 ($sdff) from module sdspi (D = $flatten\spicmdi.$procmux$1276_Y, Q = \spicmdi.rx_r1_byte).
Adding SRST signal on $flatten\spicmdi.$procdff$1548 ($dff) from module sdspi (D = $flatten\spicmdi.$procmux$1250_Y, Q = \spicmdi.o_rxvalid, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1841 ($sdff) from module sdspi (D = 1'1, Q = \spicmdi.o_rxvalid).
Adding SRST signal on $flatten\spicmdi.$procdff$1547 ($dff) from module sdspi (D = { $flatten\spicmdi.$procmux$1237_Y $flatten\spicmdi.$procmux$1245_Y }, Q = \spicmdi.o_response, rval = 40'1111111111111111111111111111111111111111).
Adding EN signal on $auto$ff.cc:266:slice$1843 ($sdff) from module sdspi (D = \lowlevel.o_byte, Q = \spicmdi.o_response [39:32]).
Adding EN signal on $auto$ff.cc:266:slice$1843 ($sdff) from module sdspi (D = { \spicmdi.o_response [23:0] \lowlevel.o_byte }, Q = \spicmdi.o_response [31:0]).
Adding EN signal on $flatten\lowlevel.$procdff$1546 ($dff) from module sdspi (D = $flatten\lowlevel.$0\r_clk_counter[7:0], Q = \lowlevel.r_clk_counter).
Adding SRST signal on $flatten\lowlevel.$procdff$1544 ($dff) from module sdspi (D = $flatten\lowlevel.$procmux$1141_Y, Q = \lowlevel.r_state, rval = 4'0000).
Adding EN signal on $auto$ff.cc:266:slice$1855 ($sdff) from module sdspi (D = $flatten\lowlevel.$procmux$1139_Y, Q = \lowlevel.r_state).
Adding SRST signal on $flatten\lowlevel.$procdff$1543 ($dff) from module sdspi (D = $flatten\lowlevel.$procmux$1156_Y, Q = \lowlevel.o_cs_n, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$1863 ($sdff) from module sdspi (D = $flatten\lowlevel.$procmux$1154_Y, Q = \lowlevel.o_cs_n).
Adding EN signal on $flatten\lowlevel.$procdff$1542 ($dff) from module sdspi (D = { \lowlevel.r_ireg [6:0] \i_miso }, Q = \lowlevel.r_ireg).
Adding EN signal on $flatten\lowlevel.$procdff$1541 ($dff) from module sdspi (D = \lowlevel.r_ireg, Q = \lowlevel.o_byte).
Adding SRST signal on $flatten\lowlevel.$procdff$1540 ($dff) from module sdspi (D = $flatten\lowlevel.$procmux$1112_Y, Q = \lowlevel.r_idle, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$1873 ($sdff) from module sdspi (D = $flatten\lowlevel.$procmux$1110_Y, Q = \lowlevel.r_idle).
Adding SRST signal on $flatten\lowlevel.$procdff$1539 ($dff) from module sdspi (D = $flatten\lowlevel.$procmux$1098_Y, Q = \lowlevel.o_sclk, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$1875 ($sdff) from module sdspi (D = $flatten\lowlevel.$logic_or$llsdspi.v:404$598_Y, Q = \lowlevel.o_sclk).
Adding SRST signal on $flatten\lowlevel.$procdff$1538 ($dff) from module sdspi (D = $flatten\lowlevel.$procmux$1073_Y, Q = \lowlevel.r_byte, rval = 8'11111111).
Adding EN signal on $auto$ff.cc:266:slice$1879 ($sdff) from module sdspi (D = $flatten\lowlevel.$procmux$1071_Y, Q = \lowlevel.r_byte).
Adding SRST signal on $flatten\lowlevel.$procdff$1537 ($dff) from module sdspi (D = $flatten\lowlevel.$procmux$1091_Y, Q = \lowlevel.o_mosi, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$1885 ($sdff) from module sdspi (D = $flatten\lowlevel.$procmux$1089_Y, Q = \lowlevel.o_mosi).
Adding SRST signal on $flatten\lowlevel.$procdff$1536 ($dff) from module sdspi (D = $flatten\lowlevel.$ge$llsdspi.v:349$575_Y, Q = \lowlevel.o_stb, rval = 1'0).
Adding SRST signal on $flatten\lowlevel.$procdff$1535 ($dff) from module sdspi (D = $flatten\lowlevel.$procmux$1052_Y, Q = \lowlevel.WAIT_FOR_POWERUP.powerup_counter, rval = 10'1111101000).
Adding EN signal on $auto$ff.cc:266:slice$1894 ($sdff) from module sdspi (D = $flatten\lowlevel.$sub$llsdspi.v:184$622_Y [9:0], Q = \lowlevel.WAIT_FOR_POWERUP.powerup_counter).
Adding SRST signal on $flatten\lowlevel.$procdff$1534 ($dff) from module sdspi (D = $flatten\lowlevel.$procmux$1057_Y, Q = \lowlevel.powerup_hold, rval = 1'1).
Adding SRST signal on $flatten\lowlevel.$procdff$1533 ($dff) from module sdspi (D = $flatten\lowlevel.$procmux$1040_Y, Q = \lowlevel.WAIT_FOR_STARTUP.startup_counter, rval = 7'1001011).
Adding EN signal on $auto$ff.cc:266:slice$1899 ($sdff) from module sdspi (D = $flatten\lowlevel.$sub$llsdspi.v:222$630_Y [6:0], Q = \lowlevel.WAIT_FOR_STARTUP.startup_counter).
Adding SRST signal on $flatten\lowlevel.$procdff$1532 ($dff) from module sdspi (D = $flatten\lowlevel.$procmux$1045_Y, Q = \lowlevel.startup_hold, rval = 1'1).
Adding EN signal on $auto$ff.cc:266:slice$1903 ($sdff) from module sdspi (D = $flatten\lowlevel.$gt$llsdspi.v:223$631_Y, Q = \lowlevel.startup_hold).

16.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sdspi..
Removed 150 unused cells and 146 unused wires.
<suppressed ~151 debug messages>

16.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sdspi.
<suppressed ~10 debug messages>

16.9.9. Rerunning OPT passes. (Maybe there is more to do..)

16.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sdspi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~72 debug messages>

16.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sdspi.
Performed a total of 0 changes.

16.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sdspi'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

16.9.13. Executing OPT_DFF pass (perform DFF optimizations).

16.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sdspi..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

16.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module sdspi.

16.9.16. Rerunning OPT passes. (Maybe there is more to do..)

16.9.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sdspi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~73 debug messages>

16.9.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sdspi.
Performed a total of 0 changes.

16.9.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sdspi'.
Removed a total of 0 cells.

16.9.20. Executing OPT_DFF pass (perform DFF optimizations).

16.9.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sdspi..

16.9.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module sdspi.

16.9.23. Finished OPT passes. (There is nothing left to do.)

16.10. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 2) from port B of cell sdspi.$eq$sdspi.v:318$31 ($eq).
Removed top 2 bits (of 3) from port B of cell sdspi.$auto$opt_dff.cc:195:make_patterns_logic$1866 ($ne).
Removed top 31 bits (of 32) from port B of cell sdspi.$add$sdspi.v:390$48 ($add).
Removed top 25 bits (of 32) from port Y of cell sdspi.$add$sdspi.v:390$48 ($add).
Removed top 1 bits (of 3) from port B of cell sdspi.$auto$opt_dff.cc:195:make_patterns_logic$1860 ($ne).
Removed top 2 bits (of 3) from port B of cell sdspi.$auto$opt_dff.cc:195:make_patterns_logic$1602 ($ne).
Removed top 30 bits (of 32) from port B of cell sdspi.$ge$sdspi.v:638$139 ($ge).
Removed top 25 bits (of 26) from port B of cell sdspi.$sub$sdspi.v:788$165 ($sub).
Removed top 1 bits (of 2) from port B of cell sdspi.$eq$sdspi.v:232$188 ($eq).
Removed top 31 bits (of 32) from port B of cell sdspi.$add$sdspi.v:746$199 ($add).
Removed top 22 bits (of 32) from port Y of cell sdspi.$add$sdspi.v:746$199 ($add).
Removed top 2 bits (of 4) from port B of cell sdspi.$auto$opt_dff.cc:195:make_patterns_logic$1868 ($ne).
Removed top 2 bits (of 3) from port B of cell sdspi.$auto$opt_dff.cc:195:make_patterns_logic$1619 ($ne).
Removed top 2 bits (of 3) from port B of cell sdspi.$auto$opt_dff.cc:195:make_patterns_logic$1628 ($ne).
Removed top 1 bits (of 2) from port B of cell sdspi.$procmux$864_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell sdspi.$flatten\lowlevel.$gt$llsdspi.v:223$631 ($gt).
Removed top 31 bits (of 32) from port B of cell sdspi.$flatten\lowlevel.$sub$llsdspi.v:222$630 ($sub).
Removed top 25 bits (of 32) from port Y of cell sdspi.$flatten\lowlevel.$sub$llsdspi.v:222$630 ($sub).
Removed top 31 bits (of 32) from port B of cell sdspi.$flatten\lowlevel.$gt$llsdspi.v:185$623 ($gt).
Removed top 31 bits (of 32) from port B of cell sdspi.$flatten\lowlevel.$sub$llsdspi.v:184$622 ($sub).
Removed top 22 bits (of 32) from port Y of cell sdspi.$flatten\lowlevel.$sub$llsdspi.v:184$622 ($sub).
Removed top 3 bits (of 4) from port B of cell sdspi.$flatten\lowlevel.$eq$llsdspi.v:383$586 ($eq).
Removed top 31 bits (of 32) from port B of cell sdspi.$flatten\lowlevel.$add$llsdspi.v:348$574 ($add).
Removed top 28 bits (of 32) from port Y of cell sdspi.$flatten\lowlevel.$add$llsdspi.v:348$574 ($add).
Removed top 2 bits (of 4) from port B of cell sdspi.$flatten\lowlevel.$ge$llsdspi.v:346$572 ($ge).
Removed top 2 bits (of 4) from port B of cell sdspi.$flatten\lowlevel.$eq$llsdspi.v:340$571 ($eq).
Removed top 7 bits (of 8) from port B of cell sdspi.$flatten\lowlevel.$eq$llsdspi.v:293$564 ($eq).
Removed top 31 bits (of 32) from port B of cell sdspi.$flatten\lowlevel.$sub$llsdspi.v:292$563 ($sub).
Removed top 24 bits (of 32) from port Y of cell sdspi.$flatten\lowlevel.$sub$llsdspi.v:292$563 ($sub).
Removed top 3 bits (of 4) from port B of cell sdspi.$auto$opt_dff.cc:195:make_patterns_logic$1638 ($ne).
Removed top 2 bits (of 8) from mux cell sdspi.$flatten\spicmdi.$procmux$1329 ($mux).
Removed top 2 bits (of 8) from mux cell sdspi.$flatten\spicmdi.$procmux$1326 ($mux).
Removed top 2 bits (of 40) from mux cell sdspi.$flatten\spicmdi.$procmux$1297 ($mux).
Removed top 2 bits (of 40) from mux cell sdspi.$flatten\spicmdi.$procmux$1294 ($mux).
Removed top 3 bits (of 7) from mux cell sdspi.$flatten\spicmdi.$procmux$1292 ($mux).
Removed top 3 bits (of 7) from mux cell sdspi.$flatten\spicmdi.$procmux$1289 ($mux).
Removed top 31 bits (of 32) from port B of cell sdspi.$flatten\spicmdi.$le$spicmd.v:195$524 ($le).
Removed top 31 bits (of 32) from port B of cell sdspi.$flatten\spicmdi.$sub$spicmd.v:194$523 ($sub).
Removed top 29 bits (of 32) from port Y of cell sdspi.$flatten\spicmdi.$sub$spicmd.v:194$523 ($sub).
Removed top 1 bits (of 2) from port B of cell sdspi.$flatten\spicmdi.$eq$spicmd.v:185$515 ($eq).
Removed top 29 bits (of 32) from mux cell sdspi.$flatten\spicmdi.$ternary$spicmd.v:184$514 ($mux).
Removed top 31 bits (of 32) from port B of cell sdspi.$flatten\spicmdi.$gt$spicmd.v:139$499 ($gt).
Removed top 31 bits (of 32) from port B of cell sdspi.$flatten\spicmdi.$sub$spicmd.v:138$498 ($sub).
Removed top 27 bits (of 32) from port Y of cell sdspi.$flatten\spicmdi.$sub$spicmd.v:138$498 ($sub).
Removed top 4 bits (of 5) from port B of cell sdspi.$auto$opt_dff.cc:195:make_patterns_logic$1858 ($ne).
Removed top 2 bits (of 3) from port B of cell sdspi.$flatten\spirxdatai.$procmux$1385_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell sdspi.$flatten\spirxdatai.$procmux$1384_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell sdspi.$flatten\spirxdatai.$procmux$1383_CMP0 ($eq).
Removed top 3 bits (of 16) from mux cell sdspi.$flatten\spirxdatai.$procmux$1358 ($mux).
Removed top 3 bits (of 16) from mux cell sdspi.$flatten\spirxdatai.$procmux$1355 ($mux).
Removed top 1 bits (of 2) from port B of cell sdspi.$flatten\spirxdatai.$eq$spirxdata.v:358$459 ($eq).
Removed top 31 bits (of 32) from port B of cell sdspi.$flatten\spirxdatai.$gt$spirxdata.v:312$443 ($gt).
Removed top 28 bits (of 32) from port Y of cell sdspi.$flatten\spirxdatai.$add$spirxdata.v:306$442 ($add).
Removed top 28 bits (of 32) from port A of cell sdspi.$flatten\spirxdatai.$add$spirxdata.v:306$442 ($add).
Removed top 28 bits (of 32) from port B of cell sdspi.$flatten\spirxdatai.$add$spirxdata.v:306$442 ($add).
Removed top 29 bits (of 32) from mux cell sdspi.$flatten\spirxdatai.$ternary$spirxdata.v:307$441 ($mux).
Removed top 28 bits (of 32) from port Y of cell sdspi.$flatten\spirxdatai.$sub$spirxdata.v:306$440 ($sub).
Removed top 28 bits (of 32) from port B of cell sdspi.$flatten\spirxdatai.$sub$spirxdata.v:306$440 ($sub).
Removed top 31 bits (of 32) from mux cell sdspi.$flatten\spirxdatai.$ternary$spirxdata.v:306$439 ($mux).
Removed top 30 bits (of 32) from port B of cell sdspi.$flatten\spirxdatai.$sub$spirxdata.v:264$421 ($sub).
Removed top 29 bits (of 32) from port Y of cell sdspi.$flatten\spirxdatai.$sub$spirxdata.v:264$421 ($sub).
Removed top 1 bits (of 4) from port A of cell sdspi.$flatten\spirxdatai.$sub$spirxdata.v:264$421 ($sub).
Removed top 29 bits (of 32) from port B of cell sdspi.$flatten\spirxdatai.$lt$spirxdata.v:262$420 ($lt).
Removed top 31 bits (of 32) from port B of cell sdspi.$flatten\spirxdatai.$add$spirxdata.v:252$417 ($add).
Removed top 30 bits (of 32) from port Y of cell sdspi.$flatten\spirxdatai.$add$spirxdata.v:252$417 ($add).
Removed top 31 bits (of 32) from port B of cell sdspi.$flatten\spirxdatai.$add$spirxdata.v:201$396 ($add).
Removed top 24 bits (of 32) from port Y of cell sdspi.$flatten\spirxdatai.$add$spirxdata.v:201$396 ($add).
Removed top 27 bits (of 32) from mux cell sdspi.$flatten\spirxdatai.$ternary$spirxdata.v:167$381 ($mux).
Removed top 31 bits (of 32) from port B of cell sdspi.$flatten\spirxdatai.$gt$spirxdata.v:123$363 ($gt).
Removed top 2 bits (of 3) from port B of cell sdspi.$flatten\spitxdatai.$procmux$681_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell sdspi.$flatten\spitxdatai.$procmux$680_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell sdspi.$flatten\spitxdatai.$procmux$679_CMP0 ($eq).
Removed top 3 bits (of 16) from mux cell sdspi.$flatten\spitxdatai.$procmux$654 ($mux).
Removed top 3 bits (of 16) from mux cell sdspi.$flatten\spitxdatai.$procmux$651 ($mux).
Removed top 31 bits (of 32) from port B of cell sdspi.$flatten\spitxdatai.$gt$spitxdata.v:338$325 ($gt).
Removed top 27 bits (of 32) from port Y of cell sdspi.$flatten\spitxdatai.$add$spitxdata.v:332$324 ($add).
Removed top 27 bits (of 32) from port A of cell sdspi.$flatten\spitxdatai.$add$spitxdata.v:332$324 ($add).
Removed top 27 bits (of 32) from port B of cell sdspi.$flatten\spitxdatai.$add$spitxdata.v:332$324 ($add).
Removed top 27 bits (of 32) from mux cell sdspi.$flatten\spitxdatai.$ternary$spitxdata.v:333$323 ($mux).
Removed top 27 bits (of 32) from port Y of cell sdspi.$flatten\spitxdatai.$sub$spitxdata.v:332$322 ($sub).
Removed top 27 bits (of 32) from port B of cell sdspi.$flatten\spitxdatai.$sub$spitxdata.v:332$322 ($sub).
Removed top 31 bits (of 32) from mux cell sdspi.$flatten\spitxdatai.$ternary$spitxdata.v:332$321 ($mux).
Removed top 31 bits (of 32) from port B of cell sdspi.$flatten\spitxdatai.$add$spitxdata.v:249$288 ($add).
Removed top 25 bits (of 32) from port Y of cell sdspi.$flatten\spitxdatai.$add$spitxdata.v:249$288 ($add).
Removed top 27 bits (of 32) from mux cell sdspi.$flatten\spitxdatai.$ternary$spitxdata.v:212$264 ($mux).
Removed top 25 bits (of 32) from wire sdspi.$add$sdspi.v:390$48_Y.
Removed top 28 bits (of 32) from wire sdspi.$flatten\lowlevel.$add$llsdspi.v:348$574_Y.
Removed top 2 bits (of 40) from wire sdspi.$flatten\spicmdi.$0\crc_shift_reg[39:0].
Removed top 2 bits (of 3) from wire sdspi.$flatten\spicmdi.$0\rx_counter[2:0].
Removed top 2 bits (of 40) from wire sdspi.$flatten\spicmdi.$0\shift_data[39:0].
Removed top 2 bits (of 40) from wire sdspi.$flatten\spicmdi.$procmux$1294_Y.
Removed top 2 bits (of 8) from wire sdspi.$flatten\spicmdi.$procmux$1326_Y.
Removed top 29 bits (of 32) from wire sdspi.$flatten\spicmdi.$sub$spicmd.v:194$523_Y.
Removed top 24 bits (of 32) from wire sdspi.$flatten\spirxdatai.$add$spirxdata.v:201$396_Y.
Removed top 30 bits (of 32) from wire sdspi.$flatten\spirxdatai.$add$spirxdata.v:252$417_Y.
Removed top 27 bits (of 32) from wire sdspi.$flatten\spirxdatai.$ternary$spirxdata.v:167$381_Y.
Removed top 8 bits (of 40) from wire sdspi.$flatten\spitxdatai.$0\gearbox[39:0].
Removed top 25 bits (of 32) from wire sdspi.$flatten\spitxdatai.$add$spitxdata.v:249$288_Y.
Removed top 27 bits (of 32) from wire sdspi.$flatten\spitxdatai.$add$spitxdata.v:332$324_Y.
Removed top 27 bits (of 32) from wire sdspi.$flatten\spitxdatai.$sub$spitxdata.v:332$322_Y.
Removed top 27 bits (of 32) from wire sdspi.$flatten\spitxdatai.$ternary$spitxdata.v:212$264_Y.
Removed top 31 bits (of 32) from wire sdspi.$flatten\spitxdatai.$ternary$spitxdata.v:332$321_Y.
Removed top 10 bits (of 32) from wire sdspi.card_status.

16.11. Executing PEEPOPT pass (run peephole optimizers).

16.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sdspi..
Removed 0 unused cells and 18 unused wires.
<suppressed ~1 debug messages>

16.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module sdspi:
  creating $macc model for $add$sdspi.v:390$48 ($add).
  creating $macc model for $add$sdspi.v:746$199 ($add).
  creating $macc model for $flatten\lowlevel.$add$llsdspi.v:348$574 ($add).
  creating $macc model for $flatten\lowlevel.$sub$llsdspi.v:184$622 ($sub).
  creating $macc model for $flatten\lowlevel.$sub$llsdspi.v:222$630 ($sub).
  creating $macc model for $flatten\lowlevel.$sub$llsdspi.v:292$563 ($sub).
  creating $macc model for $flatten\spicmdi.$sub$spicmd.v:138$498 ($sub).
  creating $macc model for $flatten\spicmdi.$sub$spicmd.v:194$523 ($sub).
  creating $macc model for $flatten\spirxdatai.$add$spirxdata.v:201$396 ($add).
  creating $macc model for $flatten\spirxdatai.$add$spirxdata.v:252$417 ($add).
  creating $macc model for $flatten\spirxdatai.$add$spirxdata.v:306$442 ($add).
  creating $macc model for $flatten\spirxdatai.$sub$spirxdata.v:264$421 ($sub).
  creating $macc model for $flatten\spirxdatai.$sub$spirxdata.v:306$440 ($sub).
  creating $macc model for $flatten\spitxdatai.$add$spitxdata.v:249$288 ($add).
  creating $macc model for $flatten\spitxdatai.$add$spitxdata.v:332$324 ($add).
  creating $macc model for $flatten\spitxdatai.$sub$spitxdata.v:332$322 ($sub).
  creating $macc model for $sub$sdspi.v:788$165 ($sub).
  merging $macc model for $flatten\spitxdatai.$sub$spitxdata.v:332$322 into $flatten\spitxdatai.$add$spitxdata.v:332$324.
  merging $macc model for $flatten\spirxdatai.$sub$spirxdata.v:306$440 into $flatten\spirxdatai.$add$spirxdata.v:306$442.
  creating $alu model for $macc $flatten\spitxdatai.$add$spitxdata.v:249$288.
  creating $alu model for $macc $sub$sdspi.v:788$165.
  creating $alu model for $macc $flatten\spirxdatai.$sub$spirxdata.v:264$421.
  creating $alu model for $macc $flatten\spirxdatai.$add$spirxdata.v:252$417.
  creating $alu model for $macc $flatten\spirxdatai.$add$spirxdata.v:201$396.
  creating $alu model for $macc $flatten\spicmdi.$sub$spicmd.v:194$523.
  creating $alu model for $macc $flatten\spicmdi.$sub$spicmd.v:138$498.
  creating $alu model for $macc $flatten\lowlevel.$sub$llsdspi.v:292$563.
  creating $alu model for $macc $flatten\lowlevel.$sub$llsdspi.v:222$630.
  creating $alu model for $macc $flatten\lowlevel.$sub$llsdspi.v:184$622.
  creating $alu model for $macc $flatten\lowlevel.$add$llsdspi.v:348$574.
  creating $alu model for $macc $add$sdspi.v:746$199.
  creating $alu model for $macc $add$sdspi.v:390$48.
  creating $macc cell for $flatten\spirxdatai.$add$spirxdata.v:306$442: $auto$alumacc.cc:365:replace_macc$1923
  creating $macc cell for $flatten\spitxdatai.$add$spitxdata.v:332$324: $auto$alumacc.cc:365:replace_macc$1924
  creating $alu model for $flatten\lowlevel.$ge$llsdspi.v:346$572 ($ge): new $alu
  creating $alu model for $flatten\lowlevel.$ge$llsdspi.v:349$575 ($ge): new $alu
  creating $alu model for $flatten\lowlevel.$gt$llsdspi.v:185$623 ($gt): new $alu
  creating $alu model for $flatten\lowlevel.$gt$llsdspi.v:223$631 ($gt): new $alu
  creating $alu model for $flatten\lowlevel.$lt$llsdspi.v:432$606 ($lt): merged with $flatten\lowlevel.$ge$llsdspi.v:349$575.
  creating $alu model for $flatten\spicmdi.$gt$spicmd.v:139$499 ($gt): new $alu
  creating $alu model for $flatten\spicmdi.$le$spicmd.v:195$524 ($le): new $alu
  creating $alu model for $flatten\spirxdatai.$gt$spirxdata.v:123$363 ($gt): new $alu
  creating $alu model for $flatten\spirxdatai.$gt$spirxdata.v:312$443 ($gt): new $alu
  creating $alu model for $flatten\spirxdatai.$lt$spirxdata.v:262$420 ($lt): new $alu
  creating $alu model for $flatten\spitxdatai.$gt$spitxdata.v:338$325 ($gt): new $alu
  creating $alu model for $ge$sdspi.v:638$139 ($ge): new $alu
  creating $alu model for $le$sdspi.v:639$140 ($le): new $alu
  creating $alu model for $flatten\lowlevel.$eq$llsdspi.v:368$581 ($eq): merged with $flatten\lowlevel.$ge$llsdspi.v:349$575.
  creating $alu model for $flatten\spirxdatai.$eq$spirxdata.v:358$459 ($eq): merged with $flatten\spirxdatai.$gt$spirxdata.v:123$363.
  creating $alu cell for $le$sdspi.v:639$140: $auto$alumacc.cc:485:replace_alu$1937
  creating $alu cell for $ge$sdspi.v:638$139: $auto$alumacc.cc:485:replace_alu$1946
  creating $alu cell for $flatten\spitxdatai.$gt$spitxdata.v:338$325: $auto$alumacc.cc:485:replace_alu$1955
  creating $alu cell for $flatten\spirxdatai.$lt$spirxdata.v:262$420: $auto$alumacc.cc:485:replace_alu$1960
  creating $alu cell for $flatten\spirxdatai.$gt$spirxdata.v:312$443: $auto$alumacc.cc:485:replace_alu$1971
  creating $alu cell for $flatten\spicmdi.$le$spicmd.v:195$524: $auto$alumacc.cc:485:replace_alu$1976
  creating $alu cell for $flatten\spicmdi.$gt$spicmd.v:139$499: $auto$alumacc.cc:485:replace_alu$1989
  creating $alu cell for $flatten\lowlevel.$gt$llsdspi.v:223$631: $auto$alumacc.cc:485:replace_alu$1994
  creating $alu cell for $flatten\lowlevel.$gt$llsdspi.v:185$623: $auto$alumacc.cc:485:replace_alu$1999
  creating $alu cell for $flatten\lowlevel.$ge$llsdspi.v:349$575, $flatten\lowlevel.$lt$llsdspi.v:432$606, $flatten\lowlevel.$eq$llsdspi.v:368$581: $auto$alumacc.cc:485:replace_alu$2004
  creating $alu cell for $flatten\lowlevel.$ge$llsdspi.v:346$572: $auto$alumacc.cc:485:replace_alu$2017
  creating $alu cell for $add$sdspi.v:390$48: $auto$alumacc.cc:485:replace_alu$2026
  creating $alu cell for $add$sdspi.v:746$199: $auto$alumacc.cc:485:replace_alu$2029
  creating $alu cell for $flatten\lowlevel.$add$llsdspi.v:348$574: $auto$alumacc.cc:485:replace_alu$2032
  creating $alu cell for $flatten\lowlevel.$sub$llsdspi.v:184$622: $auto$alumacc.cc:485:replace_alu$2035
  creating $alu cell for $flatten\lowlevel.$sub$llsdspi.v:222$630: $auto$alumacc.cc:485:replace_alu$2038
  creating $alu cell for $flatten\lowlevel.$sub$llsdspi.v:292$563: $auto$alumacc.cc:485:replace_alu$2041
  creating $alu cell for $flatten\spicmdi.$sub$spicmd.v:138$498: $auto$alumacc.cc:485:replace_alu$2044
  creating $alu cell for $flatten\spicmdi.$sub$spicmd.v:194$523: $auto$alumacc.cc:485:replace_alu$2047
  creating $alu cell for $flatten\spirxdatai.$add$spirxdata.v:201$396: $auto$alumacc.cc:485:replace_alu$2050
  creating $alu cell for $flatten\spirxdatai.$gt$spirxdata.v:123$363, $flatten\spirxdatai.$eq$spirxdata.v:358$459: $auto$alumacc.cc:485:replace_alu$2053
  creating $alu cell for $flatten\spirxdatai.$add$spirxdata.v:252$417: $auto$alumacc.cc:485:replace_alu$2060
  creating $alu cell for $flatten\spirxdatai.$sub$spirxdata.v:264$421: $auto$alumacc.cc:485:replace_alu$2063
  creating $alu cell for $sub$sdspi.v:788$165: $auto$alumacc.cc:485:replace_alu$2066
  creating $alu cell for $flatten\spitxdatai.$add$spitxdata.v:249$288: $auto$alumacc.cc:485:replace_alu$2069
  created 25 $alu and 2 $macc cells.

16.14. Executing SHARE pass (SAT-based resource sharing).

16.15. Executing OPT pass (performing simple optimizations).

16.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sdspi.

16.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sdspi'.
Removed a total of 0 cells.

16.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sdspi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~73 debug messages>

16.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sdspi.
Performed a total of 0 changes.

16.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sdspi'.
Removed a total of 0 cells.

16.15.6. Executing OPT_DFF pass (perform DFF optimizations).

16.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sdspi..
Removed 2 unused cells and 17 unused wires.
<suppressed ~3 debug messages>

16.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sdspi.

16.15.9. Rerunning OPT passes. (Maybe there is more to do..)

16.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sdspi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~73 debug messages>

16.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sdspi.
Performed a total of 0 changes.

16.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sdspi'.
Removed a total of 0 cells.

16.15.13. Executing OPT_DFF pass (perform DFF optimizations).

16.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sdspi..

16.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module sdspi.

16.15.16. Finished OPT passes. (There is nothing left to do.)

16.16. Executing MEMORY pass.

16.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

16.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

16.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing sdspi.fifo_a write port 0.
  Analyzing sdspi.fifo_b write port 0.

16.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

16.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\fifo_a'[0] in module `\sdspi': merging output FF to cell.
    Write port 0: non-transparent.
Checking read port `\fifo_b'[0] in module `\sdspi': merging output FF to cell.
    Write port 0: non-transparent.

16.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sdspi..
Removed 2 unused cells and 66 unused wires.
<suppressed ~3 debug messages>

16.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

16.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

16.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sdspi..

16.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

16.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sdspi..

16.18. Executing OPT pass (performing simple optimizations).

16.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sdspi.
<suppressed ~115 debug messages>

16.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sdspi'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

16.18.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$1832 ($dffe) from module sdspi (D = $flatten\spicmdi.$eq$spicmd.v:185$515_Y, Q = \spicmdi.rx_check_busy, rval = 1'0).

16.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sdspi..
Removed 11 unused cells and 69 unused wires.
<suppressed ~12 debug messages>

16.18.5. Rerunning OPT passes. (Removed registers in this run.)

16.18.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module sdspi.
<suppressed ~1 debug messages>

16.18.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sdspi'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

16.18.8. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$1815 ($dffe) from module sdspi (D = \r_data_reg [1:0], Q = \spicmdi.crc_shift_reg [1:0], rval = 2'00).
Adding SRST signal on $auto$ff.cc:266:slice$1801 ($dffe) from module sdspi (D = \r_data_reg [7:0], Q = \spicmdi.shift_data [7:0], rval = 8'11111111).

16.18.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sdspi..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

16.18.10. Rerunning OPT passes. (Removed registers in this run.)

16.18.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module sdspi.

16.18.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sdspi'.
Removed a total of 0 cells.

16.18.13. Executing OPT_DFF pass (perform DFF optimizations).

16.18.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sdspi..

16.18.15. Finished fast OPT passes.

16.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \fifo_a in module \sdspi:
  created 128 $dff cells and 0 static cells of width 32.
Extracted data FF from read port 0 of sdspi.fifo_a: $\fifo_a$rdreg[0]
  read interface: 1 $dff and 127 $mux cells.
  write interface: 128 write mux blocks.
Mapping memory \fifo_b in module \sdspi:
  created 128 $dff cells and 0 static cells of width 32.
Extracted data FF from read port 0 of sdspi.fifo_b: $\fifo_b$rdreg[0]
  read interface: 1 $dff and 127 $mux cells.
  write interface: 128 write mux blocks.

16.20. Executing OPT pass (performing simple optimizations).

16.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sdspi.
<suppressed ~28 debug messages>

16.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sdspi'.
Removed a total of 0 cells.

16.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sdspi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~311 debug messages>

16.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sdspi.
    Consolidated identical input bits for $mux cell $flatten\spicmdi.$procmux$1289:
      Old ports: A={ $flatten\spicmdi.$1\next_crc_byte[6:0] [2:0] 1'0 }, B={ $auto$opt_expr.cc:205:group_cell_inputs$2160 $flatten\spicmdi.$1\next_crc_byte[6:0] [1:0] 1'1 }, Y=\spicmdi.next_crc_byte [3:0]
      New ports: A={ $flatten\spicmdi.$1\next_crc_byte[6:0] [2] 1'0 }, B={ $auto$opt_expr.cc:205:group_cell_inputs$2160 1'1 }, Y={ \spicmdi.next_crc_byte [3] \spicmdi.next_crc_byte [0] }
      New connections: \spicmdi.next_crc_byte [2:1] = $flatten\spicmdi.$1\next_crc_byte[6:0] [1:0]
    Consolidated identical input bits for $mux cell $flatten\spicmdi.$procmux$1292:
      Old ports: A={ \spicmdi.crc_byte [3:1] 1'0 }, B={ $auto$opt_expr.cc:205:group_cell_inputs$2156 \spicmdi.crc_byte [2:1] 1'1 }, Y={ \spicmdi.next_crc_byte [4] $flatten\spicmdi.$1\next_crc_byte[6:0] [2:0] }
      New ports: A={ \spicmdi.crc_byte [3] 1'0 }, B={ $auto$opt_expr.cc:205:group_cell_inputs$2156 1'1 }, Y={ \spicmdi.next_crc_byte [4] $flatten\spicmdi.$1\next_crc_byte[6:0] [0] }
      New connections: $flatten\spicmdi.$1\next_crc_byte[6:0] [2:1] = \spicmdi.crc_byte [2:1]
    Consolidated identical input bits for $mux cell $flatten\spicmdi.$ternary$spicmd.v:184$514:
      Old ports: A=3'001, B=3'101, Y=$flatten\spicmdi.$ternary$spicmd.v:184$514_Y [2:0]
      New ports: A=1'0, B=1'1, Y=$flatten\spicmdi.$ternary$spicmd.v:184$514_Y [2]
      New connections: $flatten\spicmdi.$ternary$spicmd.v:184$514_Y [1:0] = 2'01
    Consolidated identical input bits for $mux cell $flatten\spirxdatai.$procmux$1355:
      Old ports: A={ \spirxdatai.first_crc_data [11:0] 1'0 }, B={ $auto$opt_expr.cc:205:group_cell_inputs$2168 [1] \spirxdatai.first_crc_data [10:5] $auto$opt_expr.cc:205:group_cell_inputs$2168 [0] \spirxdatai.first_crc_data [3:0] 1'1 }, Y=\spirxdatai.next_crc_data [12:0]
      New ports: A={ \spirxdatai.first_crc_data [11] \spirxdatai.first_crc_data [4] 1'0 }, B={ $auto$opt_expr.cc:205:group_cell_inputs$2168 1'1 }, Y={ \spirxdatai.next_crc_data [12] \spirxdatai.next_crc_data [5] \spirxdatai.next_crc_data [0] }
      New connections: { \spirxdatai.next_crc_data [11:6] \spirxdatai.next_crc_data [4:1] } = { \spirxdatai.first_crc_data [10:5] \spirxdatai.first_crc_data [3:0] }
    Consolidated identical input bits for $mux cell $flatten\spirxdatai.$procmux$1358:
      Old ports: A={ \spirxdatai.crc_data [11:0] 1'0 }, B={ $auto$opt_expr.cc:205:group_cell_inputs$2164 [1] \spirxdatai.crc_data [10:5] $auto$opt_expr.cc:205:group_cell_inputs$2164 [0] \spirxdatai.crc_data [3:0] 1'1 }, Y=\spirxdatai.first_crc_data [12:0]
      New ports: A={ \spirxdatai.crc_data [11] \spirxdatai.crc_data [4] 1'0 }, B={ $auto$opt_expr.cc:205:group_cell_inputs$2164 1'1 }, Y={ \spirxdatai.first_crc_data [12] \spirxdatai.first_crc_data [5] \spirxdatai.first_crc_data [0] }
      New connections: { \spirxdatai.first_crc_data [11:6] \spirxdatai.first_crc_data [4:1] } = { \spirxdatai.crc_data [10:5] \spirxdatai.crc_data [3:0] }
    Consolidated identical input bits for $mux cell $flatten\spirxdatai.$ternary$spirxdata.v:167$381:
      Old ports: A=5'00000, B=5'10000, Y=$auto$wreduce.cc:455:run$1915 [4:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:455:run$1915 [4]
      New connections: $auto$wreduce.cc:455:run$1915 [3:0] = 4'0000
    Consolidated identical input bits for $mux cell $flatten\spirxdatai.$ternary$spirxdata.v:307$441:
      Old ports: A=3'000, B=3'100, Y=$flatten\spirxdatai.$ternary$spirxdata.v:307$441_Y [2:0]
      New ports: A=1'0, B=1'1, Y=$flatten\spirxdatai.$ternary$spirxdata.v:307$441_Y [2]
      New connections: $flatten\spirxdatai.$ternary$spirxdata.v:307$441_Y [1:0] = 2'00
    Consolidated identical input bits for $mux cell $flatten\spitxdatai.$procmux$651:
      Old ports: A={ $flatten\spitxdatai.$1\next_crc_data[15:0] [11:0] 1'0 }, B={ $auto$opt_expr.cc:205:group_cell_inputs$2176 [1] $flatten\spitxdatai.$1\next_crc_data[15:0] [10:5] $auto$opt_expr.cc:205:group_cell_inputs$2176 [0] $flatten\spitxdatai.$1\next_crc_data[15:0] [3:0] 1'1 }, Y=\spitxdatai.next_crc_data [12:0]
      New ports: A={ $flatten\spitxdatai.$1\next_crc_data[15:0] [11] $flatten\spitxdatai.$1\next_crc_data[15:0] [4] 1'0 }, B={ $auto$opt_expr.cc:205:group_cell_inputs$2176 1'1 }, Y={ \spitxdatai.next_crc_data [12] \spitxdatai.next_crc_data [5] \spitxdatai.next_crc_data [0] }
      New connections: { \spitxdatai.next_crc_data [11:6] \spitxdatai.next_crc_data [4:1] } = { $flatten\spitxdatai.$1\next_crc_data[15:0] [10:5] $flatten\spitxdatai.$1\next_crc_data[15:0] [3:0] }
    Consolidated identical input bits for $mux cell $flatten\spitxdatai.$procmux$654:
      Old ports: A={ \spitxdatai.crc_data [11:0] 1'0 }, B={ $auto$opt_expr.cc:205:group_cell_inputs$2172 [1] \spitxdatai.crc_data [10:5] $auto$opt_expr.cc:205:group_cell_inputs$2172 [0] \spitxdatai.crc_data [3:0] 1'1 }, Y={ \spitxdatai.next_crc_data [13] $flatten\spitxdatai.$1\next_crc_data[15:0] [11:0] }
      New ports: A={ \spitxdatai.crc_data [11] \spitxdatai.crc_data [4] 1'0 }, B={ $auto$opt_expr.cc:205:group_cell_inputs$2172 1'1 }, Y={ \spitxdatai.next_crc_data [13] $flatten\spitxdatai.$1\next_crc_data[15:0] [5] $flatten\spitxdatai.$1\next_crc_data[15:0] [0] }
      New connections: { $flatten\spitxdatai.$1\next_crc_data[15:0] [11:6] $flatten\spitxdatai.$1\next_crc_data[15:0] [4:1] } = { \spitxdatai.crc_data [10:5] \spitxdatai.crc_data [3:0] }
    Consolidated identical input bits for $mux cell $flatten\spitxdatai.$procmux$752:
      Old ports: A={ \spitxdatai.gearbox [23:0] 8'11111111 }, B={ \spitxdatai.crc_data 16'0000000011111111 }, Y=$flatten\spitxdatai.$procmux$752_Y
      New ports: A=\spitxdatai.gearbox [23:0], B={ \spitxdatai.crc_data 8'00000000 }, Y=$flatten\spitxdatai.$procmux$752_Y [31:8]
      New connections: $flatten\spitxdatai.$procmux$752_Y [7:0] = 8'11111111
    Consolidated identical input bits for $mux cell $flatten\spitxdatai.$procmux$776:
      Old ports: A={ \spitxdatai.fill [2:0] 1'0 }, B=4'1100, Y=$flatten\spitxdatai.$procmux$776_Y
      New ports: A=\spitxdatai.fill [2:0], B=3'110, Y=$flatten\spitxdatai.$procmux$776_Y [3:1]
      New connections: $flatten\spitxdatai.$procmux$776_Y [0] = 1'0
    Consolidated identical input bits for $mux cell $flatten\spitxdatai.$ternary$spitxdata.v:212$264:
      Old ports: A=5'00000, B=5'10000, Y=$auto$wreduce.cc:455:run$1920 [4:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:455:run$1920 [4]
      New connections: $auto$wreduce.cc:455:run$1920 [3:0] = 4'0000
    Consolidated identical input bits for $mux cell $flatten\spitxdatai.$ternary$spitxdata.v:333$323:
      Old ports: A=5'00000, B=5'10000, Y=$flatten\spitxdatai.$ternary$spitxdata.v:333$323_Y [4:0]
      New ports: A=1'0, B=1'1, Y=$flatten\spitxdatai.$ternary$spitxdata.v:333$323_Y [4]
      New connections: $flatten\spitxdatai.$ternary$spitxdata.v:333$323_Y [3:0] = 4'0000
    Consolidated identical input bits for $mux cell $procmux$899:
      Old ports: A={ 24'000000000000000000000000 \spirxdatai.o_response }, B={ 24'000000000000000000000000 \spitxdatai.o_response }, Y=$procmux$899_Y
      New ports: A=\spirxdatai.o_response, B=\spitxdatai.o_response, Y=$procmux$899_Y [7:0]
      New connections: $procmux$899_Y [31:8] = 24'000000000000000000000000
  Optimizing cells in module \sdspi.
Performed a total of 14 changes.

16.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sdspi'.
Removed a total of 0 cells.

16.20.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $mux $procmux$882 in front of them:
        $logic_or$sdspi.v:604$123
        $logic_or$sdspi.v:607$125

    Found cells that share an operand and can be merged by moving the $mux $procmux$917 in front of them:
        $logic_or$sdspi.v:562$114
        $logic_or$sdspi.v:560$113

16.20.7. Executing OPT_DFF pass (perform DFF optimizations).

16.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sdspi..
Removed 0 unused cells and 532 unused wires.
<suppressed ~1 debug messages>

16.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module sdspi.
<suppressed ~7 debug messages>

16.20.10. Rerunning OPT passes. (Maybe there is more to do..)

16.20.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sdspi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $auto$opt_share.cc:241:merge_operators$5196: \spicmdi.o_busy -> 1'1
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~309 debug messages>

16.20.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sdspi.
Performed a total of 0 changes.

16.20.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sdspi'.
Removed a total of 0 cells.

16.20.14. Executing OPT_SHARE pass.

16.20.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\fifo_b[9]$3708 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[9]).
Adding EN signal on $memory\fifo_b[99]$3888 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[99]).
Adding EN signal on $memory\fifo_b[98]$3886 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[98]).
Adding EN signal on $memory\fifo_b[97]$3884 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[97]).
Adding EN signal on $memory\fifo_b[96]$3882 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[96]).
Adding EN signal on $memory\fifo_b[95]$3880 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[95]).
Adding EN signal on $memory\fifo_b[94]$3878 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[94]).
Adding EN signal on $memory\fifo_b[93]$3876 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[93]).
Adding EN signal on $memory\fifo_b[92]$3874 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[92]).
Adding EN signal on $memory\fifo_b[91]$3872 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[91]).
Adding EN signal on $memory\fifo_b[90]$3870 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[90]).
Adding EN signal on $memory\fifo_b[8]$3706 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[8]).
Adding EN signal on $memory\fifo_b[89]$3868 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[89]).
Adding EN signal on $memory\fifo_b[88]$3866 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[88]).
Adding EN signal on $memory\fifo_b[87]$3864 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[87]).
Adding EN signal on $memory\fifo_b[86]$3862 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[86]).
Adding EN signal on $memory\fifo_b[85]$3860 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[85]).
Adding EN signal on $memory\fifo_b[84]$3858 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[84]).
Adding EN signal on $memory\fifo_b[83]$3856 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[83]).
Adding EN signal on $memory\fifo_b[82]$3854 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[82]).
Adding EN signal on $memory\fifo_b[81]$3852 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[81]).
Adding EN signal on $memory\fifo_b[80]$3850 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[80]).
Adding EN signal on $memory\fifo_b[7]$3704 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[7]).
Adding EN signal on $memory\fifo_b[79]$3848 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[79]).
Adding EN signal on $memory\fifo_b[78]$3846 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[78]).
Adding EN signal on $memory\fifo_b[77]$3844 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[77]).
Adding EN signal on $memory\fifo_b[76]$3842 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[76]).
Adding EN signal on $memory\fifo_b[75]$3840 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[75]).
Adding EN signal on $memory\fifo_b[74]$3838 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[74]).
Adding EN signal on $memory\fifo_b[73]$3836 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[73]).
Adding EN signal on $memory\fifo_b[72]$3834 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[72]).
Adding EN signal on $memory\fifo_b[71]$3832 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[71]).
Adding EN signal on $memory\fifo_b[70]$3830 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[70]).
Adding EN signal on $memory\fifo_b[6]$3702 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[6]).
Adding EN signal on $memory\fifo_b[69]$3828 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[69]).
Adding EN signal on $memory\fifo_b[68]$3826 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[68]).
Adding EN signal on $memory\fifo_b[67]$3824 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[67]).
Adding EN signal on $memory\fifo_b[66]$3822 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[66]).
Adding EN signal on $memory\fifo_b[65]$3820 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[65]).
Adding EN signal on $memory\fifo_b[64]$3818 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[64]).
Adding EN signal on $memory\fifo_b[63]$3816 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[63]).
Adding EN signal on $memory\fifo_b[62]$3814 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[62]).
Adding EN signal on $memory\fifo_b[61]$3812 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[61]).
Adding EN signal on $memory\fifo_b[60]$3810 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[60]).
Adding EN signal on $memory\fifo_b[5]$3700 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[5]).
Adding EN signal on $memory\fifo_b[59]$3808 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[59]).
Adding EN signal on $memory\fifo_b[58]$3806 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[58]).
Adding EN signal on $memory\fifo_b[57]$3804 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[57]).
Adding EN signal on $memory\fifo_b[56]$3802 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[56]).
Adding EN signal on $memory\fifo_b[55]$3800 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[55]).
Adding EN signal on $memory\fifo_b[54]$3798 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[54]).
Adding EN signal on $memory\fifo_b[53]$3796 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[53]).
Adding EN signal on $memory\fifo_b[52]$3794 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[52]).
Adding EN signal on $memory\fifo_b[51]$3792 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[51]).
Adding EN signal on $memory\fifo_b[50]$3790 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[50]).
Adding EN signal on $memory\fifo_b[4]$3698 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[4]).
Adding EN signal on $memory\fifo_b[49]$3788 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[49]).
Adding EN signal on $memory\fifo_b[48]$3786 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[48]).
Adding EN signal on $memory\fifo_b[47]$3784 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[47]).
Adding EN signal on $memory\fifo_b[46]$3782 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[46]).
Adding EN signal on $memory\fifo_b[45]$3780 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[45]).
Adding EN signal on $memory\fifo_b[44]$3778 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[44]).
Adding EN signal on $memory\fifo_b[43]$3776 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[43]).
Adding EN signal on $memory\fifo_b[42]$3774 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[42]).
Adding EN signal on $memory\fifo_b[41]$3772 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[41]).
Adding EN signal on $memory\fifo_b[40]$3770 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[40]).
Adding EN signal on $memory\fifo_b[3]$3696 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[3]).
Adding EN signal on $memory\fifo_b[39]$3768 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[39]).
Adding EN signal on $memory\fifo_b[38]$3766 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[38]).
Adding EN signal on $memory\fifo_b[37]$3764 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[37]).
Adding EN signal on $memory\fifo_b[36]$3762 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[36]).
Adding EN signal on $memory\fifo_b[35]$3760 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[35]).
Adding EN signal on $memory\fifo_b[34]$3758 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[34]).
Adding EN signal on $memory\fifo_b[33]$3756 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[33]).
Adding EN signal on $memory\fifo_b[32]$3754 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[32]).
Adding EN signal on $memory\fifo_b[31]$3752 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[31]).
Adding EN signal on $memory\fifo_b[30]$3750 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[30]).
Adding EN signal on $memory\fifo_b[2]$3694 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[2]).
Adding EN signal on $memory\fifo_b[29]$3748 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[29]).
Adding EN signal on $memory\fifo_b[28]$3746 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[28]).
Adding EN signal on $memory\fifo_b[27]$3744 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[27]).
Adding EN signal on $memory\fifo_b[26]$3742 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[26]).
Adding EN signal on $memory\fifo_b[25]$3740 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[25]).
Adding EN signal on $memory\fifo_b[24]$3738 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[24]).
Adding EN signal on $memory\fifo_b[23]$3736 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[23]).
Adding EN signal on $memory\fifo_b[22]$3734 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[22]).
Adding EN signal on $memory\fifo_b[21]$3732 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[21]).
Adding EN signal on $memory\fifo_b[20]$3730 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[20]).
Adding EN signal on $memory\fifo_b[1]$3692 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[1]).
Adding EN signal on $memory\fifo_b[19]$3728 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[19]).
Adding EN signal on $memory\fifo_b[18]$3726 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[18]).
Adding EN signal on $memory\fifo_b[17]$3724 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[17]).
Adding EN signal on $memory\fifo_b[16]$3722 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[16]).
Adding EN signal on $memory\fifo_b[15]$3720 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[15]).
Adding EN signal on $memory\fifo_b[14]$3718 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[14]).
Adding EN signal on $memory\fifo_b[13]$3716 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[13]).
Adding EN signal on $memory\fifo_b[12]$3714 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[12]).
Adding EN signal on $memory\fifo_b[127]$3944 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[127]).
Adding EN signal on $memory\fifo_b[126]$3942 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[126]).
Adding EN signal on $memory\fifo_b[125]$3940 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[125]).
Adding EN signal on $memory\fifo_b[124]$3938 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[124]).
Adding EN signal on $memory\fifo_b[123]$3936 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[123]).
Adding EN signal on $memory\fifo_b[122]$3934 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[122]).
Adding EN signal on $memory\fifo_b[121]$3932 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[121]).
Adding EN signal on $memory\fifo_b[120]$3930 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[120]).
Adding EN signal on $memory\fifo_b[11]$3712 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[11]).
Adding EN signal on $memory\fifo_b[119]$3928 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[119]).
Adding EN signal on $memory\fifo_b[118]$3926 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[118]).
Adding EN signal on $memory\fifo_b[117]$3924 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[117]).
Adding EN signal on $memory\fifo_b[116]$3922 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[116]).
Adding EN signal on $memory\fifo_b[115]$3920 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[115]).
Adding EN signal on $memory\fifo_b[114]$3918 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[114]).
Adding EN signal on $memory\fifo_b[113]$3916 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[113]).
Adding EN signal on $memory\fifo_b[112]$3914 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[112]).
Adding EN signal on $memory\fifo_b[111]$3912 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[111]).
Adding EN signal on $memory\fifo_b[110]$3910 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[110]).
Adding EN signal on $memory\fifo_b[10]$3710 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[10]).
Adding EN signal on $memory\fifo_b[109]$3908 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[109]).
Adding EN signal on $memory\fifo_b[108]$3906 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[108]).
Adding EN signal on $memory\fifo_b[107]$3904 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[107]).
Adding EN signal on $memory\fifo_b[106]$3902 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[106]).
Adding EN signal on $memory\fifo_b[105]$3900 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[105]).
Adding EN signal on $memory\fifo_b[104]$3898 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[104]).
Adding EN signal on $memory\fifo_b[103]$3896 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[103]).
Adding EN signal on $memory\fifo_b[102]$3894 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[102]).
Adding EN signal on $memory\fifo_b[101]$3892 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[101]).
Adding EN signal on $memory\fifo_b[100]$3890 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[100]).
Adding EN signal on $memory\fifo_b[0]$3690 ($dff) from module sdspi (D = \write_fifo_b_data, Q = \fifo_b[0]).
Adding EN signal on $memory\fifo_a[9]$2203 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[9]).
Adding EN signal on $memory\fifo_a[99]$2383 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[99]).
Adding EN signal on $memory\fifo_a[98]$2381 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[98]).
Adding EN signal on $memory\fifo_a[97]$2379 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[97]).
Adding EN signal on $memory\fifo_a[96]$2377 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[96]).
Adding EN signal on $memory\fifo_a[95]$2375 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[95]).
Adding EN signal on $memory\fifo_a[94]$2373 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[94]).
Adding EN signal on $memory\fifo_a[93]$2371 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[93]).
Adding EN signal on $memory\fifo_a[92]$2369 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[92]).
Adding EN signal on $memory\fifo_a[91]$2367 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[91]).
Adding EN signal on $memory\fifo_a[90]$2365 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[90]).
Adding EN signal on $memory\fifo_a[8]$2201 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[8]).
Adding EN signal on $memory\fifo_a[89]$2363 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[89]).
Adding EN signal on $memory\fifo_a[88]$2361 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[88]).
Adding EN signal on $memory\fifo_a[87]$2359 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[87]).
Adding EN signal on $memory\fifo_a[86]$2357 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[86]).
Adding EN signal on $memory\fifo_a[85]$2355 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[85]).
Adding EN signal on $memory\fifo_a[84]$2353 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[84]).
Adding EN signal on $memory\fifo_a[83]$2351 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[83]).
Adding EN signal on $memory\fifo_a[82]$2349 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[82]).
Adding EN signal on $memory\fifo_a[81]$2347 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[81]).
Adding EN signal on $memory\fifo_a[80]$2345 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[80]).
Adding EN signal on $memory\fifo_a[7]$2199 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[7]).
Adding EN signal on $memory\fifo_a[79]$2343 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[79]).
Adding EN signal on $memory\fifo_a[78]$2341 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[78]).
Adding EN signal on $memory\fifo_a[77]$2339 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[77]).
Adding EN signal on $memory\fifo_a[76]$2337 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[76]).
Adding EN signal on $memory\fifo_a[75]$2335 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[75]).
Adding EN signal on $memory\fifo_a[74]$2333 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[74]).
Adding EN signal on $memory\fifo_a[73]$2331 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[73]).
Adding EN signal on $memory\fifo_a[72]$2329 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[72]).
Adding EN signal on $memory\fifo_a[71]$2327 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[71]).
Adding EN signal on $memory\fifo_a[70]$2325 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[70]).
Adding EN signal on $memory\fifo_a[6]$2197 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[6]).
Adding EN signal on $memory\fifo_a[69]$2323 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[69]).
Adding EN signal on $memory\fifo_a[68]$2321 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[68]).
Adding EN signal on $memory\fifo_a[67]$2319 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[67]).
Adding EN signal on $memory\fifo_a[66]$2317 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[66]).
Adding EN signal on $memory\fifo_a[65]$2315 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[65]).
Adding EN signal on $memory\fifo_a[64]$2313 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[64]).
Adding EN signal on $memory\fifo_a[63]$2311 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[63]).
Adding EN signal on $memory\fifo_a[62]$2309 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[62]).
Adding EN signal on $memory\fifo_a[61]$2307 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[61]).
Adding EN signal on $memory\fifo_a[60]$2305 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[60]).
Adding EN signal on $memory\fifo_a[5]$2195 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[5]).
Adding EN signal on $memory\fifo_a[59]$2303 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[59]).
Adding EN signal on $memory\fifo_a[58]$2301 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[58]).
Adding EN signal on $memory\fifo_a[57]$2299 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[57]).
Adding EN signal on $memory\fifo_a[56]$2297 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[56]).
Adding EN signal on $memory\fifo_a[55]$2295 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[55]).
Adding EN signal on $memory\fifo_a[54]$2293 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[54]).
Adding EN signal on $memory\fifo_a[53]$2291 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[53]).
Adding EN signal on $memory\fifo_a[52]$2289 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[52]).
Adding EN signal on $memory\fifo_a[51]$2287 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[51]).
Adding EN signal on $memory\fifo_a[50]$2285 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[50]).
Adding EN signal on $memory\fifo_a[4]$2193 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[4]).
Adding EN signal on $memory\fifo_a[49]$2283 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[49]).
Adding EN signal on $memory\fifo_a[48]$2281 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[48]).
Adding EN signal on $memory\fifo_a[47]$2279 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[47]).
Adding EN signal on $memory\fifo_a[46]$2277 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[46]).
Adding EN signal on $memory\fifo_a[45]$2275 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[45]).
Adding EN signal on $memory\fifo_a[44]$2273 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[44]).
Adding EN signal on $memory\fifo_a[43]$2271 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[43]).
Adding EN signal on $memory\fifo_a[42]$2269 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[42]).
Adding EN signal on $memory\fifo_a[41]$2267 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[41]).
Adding EN signal on $memory\fifo_a[40]$2265 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[40]).
Adding EN signal on $memory\fifo_a[3]$2191 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[3]).
Adding EN signal on $memory\fifo_a[39]$2263 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[39]).
Adding EN signal on $memory\fifo_a[38]$2261 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[38]).
Adding EN signal on $memory\fifo_a[37]$2259 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[37]).
Adding EN signal on $memory\fifo_a[36]$2257 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[36]).
Adding EN signal on $memory\fifo_a[35]$2255 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[35]).
Adding EN signal on $memory\fifo_a[34]$2253 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[34]).
Adding EN signal on $memory\fifo_a[33]$2251 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[33]).
Adding EN signal on $memory\fifo_a[32]$2249 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[32]).
Adding EN signal on $memory\fifo_a[31]$2247 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[31]).
Adding EN signal on $memory\fifo_a[30]$2245 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[30]).
Adding EN signal on $memory\fifo_a[2]$2189 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[2]).
Adding EN signal on $memory\fifo_a[29]$2243 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[29]).
Adding EN signal on $memory\fifo_a[28]$2241 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[28]).
Adding EN signal on $memory\fifo_a[27]$2239 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[27]).
Adding EN signal on $memory\fifo_a[26]$2237 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[26]).
Adding EN signal on $memory\fifo_a[25]$2235 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[25]).
Adding EN signal on $memory\fifo_a[24]$2233 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[24]).
Adding EN signal on $memory\fifo_a[23]$2231 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[23]).
Adding EN signal on $memory\fifo_a[22]$2229 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[22]).
Adding EN signal on $memory\fifo_a[21]$2227 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[21]).
Adding EN signal on $memory\fifo_a[20]$2225 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[20]).
Adding EN signal on $memory\fifo_a[1]$2187 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[1]).
Adding EN signal on $memory\fifo_a[19]$2223 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[19]).
Adding EN signal on $memory\fifo_a[18]$2221 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[18]).
Adding EN signal on $memory\fifo_a[17]$2219 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[17]).
Adding EN signal on $memory\fifo_a[16]$2217 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[16]).
Adding EN signal on $memory\fifo_a[15]$2215 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[15]).
Adding EN signal on $memory\fifo_a[14]$2213 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[14]).
Adding EN signal on $memory\fifo_a[13]$2211 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[13]).
Adding EN signal on $memory\fifo_a[12]$2209 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[12]).
Adding EN signal on $memory\fifo_a[127]$2439 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[127]).
Adding EN signal on $memory\fifo_a[126]$2437 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[126]).
Adding EN signal on $memory\fifo_a[125]$2435 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[125]).
Adding EN signal on $memory\fifo_a[124]$2433 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[124]).
Adding EN signal on $memory\fifo_a[123]$2431 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[123]).
Adding EN signal on $memory\fifo_a[122]$2429 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[122]).
Adding EN signal on $memory\fifo_a[121]$2427 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[121]).
Adding EN signal on $memory\fifo_a[120]$2425 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[120]).
Adding EN signal on $memory\fifo_a[11]$2207 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[11]).
Adding EN signal on $memory\fifo_a[119]$2423 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[119]).
Adding EN signal on $memory\fifo_a[118]$2421 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[118]).
Adding EN signal on $memory\fifo_a[117]$2419 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[117]).
Adding EN signal on $memory\fifo_a[116]$2417 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[116]).
Adding EN signal on $memory\fifo_a[115]$2415 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[115]).
Adding EN signal on $memory\fifo_a[114]$2413 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[114]).
Adding EN signal on $memory\fifo_a[113]$2411 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[113]).
Adding EN signal on $memory\fifo_a[112]$2409 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[112]).
Adding EN signal on $memory\fifo_a[111]$2407 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[111]).
Adding EN signal on $memory\fifo_a[110]$2405 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[110]).
Adding EN signal on $memory\fifo_a[10]$2205 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[10]).
Adding EN signal on $memory\fifo_a[109]$2403 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[109]).
Adding EN signal on $memory\fifo_a[108]$2401 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[108]).
Adding EN signal on $memory\fifo_a[107]$2399 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[107]).
Adding EN signal on $memory\fifo_a[106]$2397 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[106]).
Adding EN signal on $memory\fifo_a[105]$2395 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[105]).
Adding EN signal on $memory\fifo_a[104]$2393 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[104]).
Adding EN signal on $memory\fifo_a[103]$2391 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[103]).
Adding EN signal on $memory\fifo_a[102]$2389 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[102]).
Adding EN signal on $memory\fifo_a[101]$2387 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[101]).
Adding EN signal on $memory\fifo_a[100]$2385 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[100]).
Adding EN signal on $memory\fifo_a[0]$2185 ($dff) from module sdspi (D = \write_fifo_a_data, Q = \fifo_a[0]).
Adding SRST signal on $auto$ff.cc:266:slice$1821 ($dffe) from module sdspi (D = $auto$wreduce.cc:455:run$1912 [1:0], Q = \spicmdi.rx_counter [1:0], rval = 2'01).

16.20.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sdspi..
Removed 256 unused cells and 263 unused wires.
<suppressed ~257 debug messages>

16.20.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module sdspi.
<suppressed ~1 debug messages>

16.20.18. Rerunning OPT passes. (Maybe there is more to do..)

16.20.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sdspi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~52 debug messages>

16.20.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sdspi.
Performed a total of 0 changes.

16.20.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sdspi'.
Removed a total of 0 cells.

16.20.22. Executing OPT_SHARE pass.

16.20.23. Executing OPT_DFF pass (perform DFF optimizations).

16.20.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sdspi..

16.20.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module sdspi.

16.20.26. Finished OPT passes. (There is nothing left to do.)

16.21. Executing TECHMAP pass (map to technology primitives).

16.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

16.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$754650b284649a026620fc6856e5b6886cbfe794\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $dff.
Using template $paramod$6b90a16b6f3b57b9c9d958838204f952a01dc262\_90_alu for cells of type $alu.
Using template $paramod$d1615bf4e5e328245ffd1550e5fe105901cda77b\_90_alu for cells of type $alu.
Using template $paramod$103b4016182df467cceab67bcf3e18e6361ec0fd\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $sdffce.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod$54d740639e1393b22262823179ff783ea9f17a35\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $sdff.
Using extmapper maccmap for cells of type $macc.
  add \spirxdatai.crc_fill (4 bits, unsigned)
  add { \spirxdatai.new_data_byte 2'00 } (3 bits, unsigned)
  sub \spirxdatai.crc_active (1 bits, unsigned)
Using template $paramod$403a3c2fa431a154c52a6a5429d7a6260b5d144f\_90_alu for cells of type $alu.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using template $paramod$10ed987432f06055e5279101f9ec60a49861b43c\_90_alu for cells of type $alu.
Using template $paramod$1eb759649286d7485bd82f4dfc30385bade4b4b3\_90_alu for cells of type $alu.
Using template $paramod$dc04b7d98e503a7bab16fce2df70e6e2c5ca34d6\_90_alu for cells of type $alu.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$b8c0a997bce700f23568a5ada79cc6781d1f5ca0\_90_alu for cells of type $alu.
Using template $paramod$eaeb96106163dbf82031649d189817109fe07c69\_90_pmux for cells of type $pmux.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
  add \spitxdatai.crc_fill (5 bits, unsigned)
  add { \spitxdatai.rdvalid [1] 4'0000 } (5 bits, unsigned)
  sub \spitxdatai.crc_active (1 bits, unsigned)
Using template $paramod$9f53511a6616d1b893f9d4267848c15e4d483779\_90_alu for cells of type $alu.
Using template $paramod$7af24cf7f572852703f08ef7a936c59efa2c57af\_90_alu for cells of type $alu.
Using template $paramod$2116a631f856d4d4902c2618dca73dafa3b8c9c0\_90_alu for cells of type $alu.
Using template $paramod$adbaf76fa5a3091a329503792521395f8ff4d1a4\_90_alu for cells of type $alu.
Using template $paramod$2407ada40cc3dda6c6015be2b49b748cddb5a800\_90_pmux for cells of type $pmux.
Using template $paramod$1a3a0c35c4a4896fbfd612699525c057298e72d2\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001010 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000000100 for cells of type $fa.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000000101 for cells of type $fa.
Using template $paramod$b18e16801adf491a64caa0542270798e5d4ac6b6\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000001 for cells of type $lcu.
No more expansions possible.
<suppressed ~3951 debug messages>

16.22. Executing OPT pass (performing simple optimizations).

16.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sdspi.
<suppressed ~946 debug messages>

16.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sdspi'.
<suppressed ~540 debug messages>
Removed a total of 180 cells.

16.22.3. Executing OPT_DFF pass (perform DFF optimizations).

16.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sdspi..
Removed 155 unused cells and 1387 unused wires.
<suppressed ~156 debug messages>

16.22.5. Finished fast OPT passes.

16.23. Executing ABC pass (technology mapping using ABC).

16.23.1. Extracting gate netlist of module `\sdspi' to `<abc-temp-dir>/input.blif'..
Extracted 10483 gates and 19357 wires to a netlist network with 8871 inputs and 896 outputs.

16.23.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

16.23.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:     8560
ABC RESULTS:               NOT cells:       62
ABC RESULTS:              NAND cells:       58
ABC RESULTS:               AND cells:       73
ABC RESULTS:              XNOR cells:       25
ABC RESULTS:             ORNOT cells:       89
ABC RESULTS:               NOR cells:       79
ABC RESULTS:               XOR cells:      109
ABC RESULTS:                OR cells:      509
ABC RESULTS:            ANDNOT cells:      663
ABC RESULTS:        internal signals:     9590
ABC RESULTS:           input signals:     8871
ABC RESULTS:          output signals:      896
Removing temp directory.

16.24. Executing OPT pass (performing simple optimizations).

16.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sdspi.
<suppressed ~71 debug messages>

16.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sdspi'.
<suppressed ~66 debug messages>
Removed a total of 22 cells.

16.24.3. Executing OPT_DFF pass (perform DFF optimizations).

16.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sdspi..
Removed 1 unused cells and 10818 unused wires.
<suppressed ~14 debug messages>

16.24.5. Finished fast OPT passes.

16.25. Executing HIERARCHY pass (managing design hierarchy).

16.25.1. Analyzing design hierarchy..
Top module:  \sdspi

16.25.2. Analyzing design hierarchy..
Top module:  \sdspi
Removed 0 unused modules.

16.26. Printing statistics.

=== sdspi ===

   Number of wires:              10336
   Number of wire bits:          19757
   Number of public wires:         454
   Number of public wire bits:    9492
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              19212
     $_ANDNOT_                     662
     $_AND_                         73
     $_DFFE_PN_                     15
     $_DFFE_PP_                   8428
     $_DFF_P_                      280
     $_MUX_                       8560
     $_NAND_                        58
     $_NOR_                         58
     $_NOT_                         61
     $_ORNOT_                       89
     $_OR_                         509
     $_SDFFCE_PN0P_                  1
     $_SDFFCE_PN1P_                  9
     $_SDFFCE_PP0P_                  3
     $_SDFFE_PN0N_                   5
     $_SDFFE_PN0P_                  66
     $_SDFFE_PN1N_                   1
     $_SDFFE_PN1P_                  71
     $_SDFFE_PP0N_                  21
     $_SDFFE_PP0P_                  58
     $_SDFFE_PP1N_                   1
     $_SDFFE_PP1P_                  31
     $_SDFF_PN0_                     3
     $_SDFF_PP0_                    14
     $_SDFF_PP1_                     1
     $_XNOR_                        25
     $_XOR_                        109

16.27. Executing CHECK pass (checking for obvious problems).
Checking module sdspi...
Found and reported 0 problems.

17. Executing ABC pass (technology mapping using ABC).

17.1. Extracting gate netlist of module `\sdspi' to `<abc-temp-dir>/input.blif'..
Extracted 10204 gates and 19075 wires to a netlist network with 8871 inputs and 895 outputs.

17.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 6 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

17.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:     2651
ABC RESULTS:              NAND cells:    12204
ABC RESULTS:               NOR cells:    14692
ABC RESULTS:              ZERO cells:        3
ABC RESULTS:        internal signals:     9309
ABC RESULTS:           input signals:     8871
ABC RESULTS:          output signals:      895
Removing temp directory.

18. Printing statistics.

=== sdspi ===

   Number of wires:              48757
   Number of wire bits:          58178
   Number of public wires:         454
   Number of public wire bits:    9492
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:              38555
     $_DFFE_PN_                     15
     $_DFFE_PP_                   8428
     $_DFF_P_                      280
     $_NAND_                     12204
     $_NOR_                      14692
     $_NOT_                       2651
     $_SDFFCE_PN0P_                  1
     $_SDFFCE_PN1P_                  9
     $_SDFFCE_PP0P_                  3
     $_SDFFE_PN0N_                   5
     $_SDFFE_PN0P_                  66
     $_SDFFE_PN1N_                   1
     $_SDFFE_PN1P_                  71
     $_SDFFE_PP0N_                  21
     $_SDFFE_PP0P_                  58
     $_SDFFE_PP1N_                   1
     $_SDFFE_PP1P_                  31
     $_SDFF_PN0_                     3
     $_SDFF_PP0_                    14
     $_SDFF_PP1_                     1

End of script. Logfile hash: 2429ead631, CPU: user 4.61s system 0.04s, MEM: 104.93 MB peak
Yosys 0.27+22 (git sha1 266f81816, gcc 9.4.0-1ubuntu1~20.04.1 -fPIC -Os)
Time spent: 47% 2x abc (3 sec), 18% 39x opt_expr (1 sec), ...
